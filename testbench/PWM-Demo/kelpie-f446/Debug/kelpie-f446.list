
kelpie-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fec  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080031b0  080031b0  000131b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031c8  080031c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031c8  080031c8  000131c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031d0  080031d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031d0  080031d0  000131d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031d4  080031d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080031e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080031e4  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d21a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  0002d256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002ebd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020ee2  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd56  00000000  00000000  000511e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8fa  00000000  00000000  0005ef38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012b832  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003240  00000000  00000000  0012b888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003198 	.word	0x08003198

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003198 	.word	0x08003198

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fc9c 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f896 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fab2 	bl	8000a70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 fa86 	bl	8000a1c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000510:	f000 f8fc 	bl	800070c <MX_TIM1_Init>
  MX_TIM8_Init();
 8000514:	f000 f9be 	bl	8000894 <MX_TIM8_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  TIM1->CCR1 = STARTUP_PWM;
 8000518:	4b42      	ldr	r3, [pc, #264]	; (8000624 <main+0x128>)
 800051a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800051e:	635a      	str	r2, [r3, #52]	; 0x34
  //TIM1->CCR2 = 40000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000520:	2100      	movs	r1, #0
 8000522:	4841      	ldr	r0, [pc, #260]	; (8000628 <main+0x12c>)
 8000524:	f001 fdc6 	bl	80020b4 <HAL_TIM_PWM_Start>
  TIM1->CCR2 = STARTUP_PWM;
 8000528:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <main+0x128>)
 800052a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800052e:	639a      	str	r2, [r3, #56]	; 0x38
  //TIM1->CCR2 = 40000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000530:	2104      	movs	r1, #4
 8000532:	483d      	ldr	r0, [pc, #244]	; (8000628 <main+0x12c>)
 8000534:	f001 fdbe 	bl	80020b4 <HAL_TIM_PWM_Start>
  TIM1->CCR3 = STARTUP_PWM;
 8000538:	4b3a      	ldr	r3, [pc, #232]	; (8000624 <main+0x128>)
 800053a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800053e:	63da      	str	r2, [r3, #60]	; 0x3c
  //TIM1->CCR2 = 40000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000540:	2108      	movs	r1, #8
 8000542:	4839      	ldr	r0, [pc, #228]	; (8000628 <main+0x12c>)
 8000544:	f001 fdb6 	bl	80020b4 <HAL_TIM_PWM_Start>
  TIM1->CCR4 = STARTUP_PWM;
 8000548:	4b36      	ldr	r3, [pc, #216]	; (8000624 <main+0x128>)
 800054a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800054e:	641a      	str	r2, [r3, #64]	; 0x40
  //TIM1->CCR2 = 40000;
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000550:	210c      	movs	r1, #12
 8000552:	4835      	ldr	r0, [pc, #212]	; (8000628 <main+0x12c>)
 8000554:	f001 fdae 	bl	80020b4 <HAL_TIM_PWM_Start>

  TIM8->CCR1 = STARTUP_PWM;
 8000558:	4b34      	ldr	r3, [pc, #208]	; (800062c <main+0x130>)
 800055a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800055e:	635a      	str	r2, [r3, #52]	; 0x34
  //TIM1->CCR2 = 40000;
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	4833      	ldr	r0, [pc, #204]	; (8000630 <main+0x134>)
 8000564:	f001 fda6 	bl	80020b4 <HAL_TIM_PWM_Start>
  TIM8->CCR2 = STARTUP_PWM;
 8000568:	4b30      	ldr	r3, [pc, #192]	; (800062c <main+0x130>)
 800056a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800056e:	639a      	str	r2, [r3, #56]	; 0x38
  //TIM1->CCR2 = 40000;
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000570:	2104      	movs	r1, #4
 8000572:	482f      	ldr	r0, [pc, #188]	; (8000630 <main+0x134>)
 8000574:	f001 fd9e 	bl	80020b4 <HAL_TIM_PWM_Start>
  TIM8->CCR3 = STARTUP_PWM;
 8000578:	4b2c      	ldr	r3, [pc, #176]	; (800062c <main+0x130>)
 800057a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800057e:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000580:	2108      	movs	r1, #8
 8000582:	482b      	ldr	r0, [pc, #172]	; (8000630 <main+0x134>)
 8000584:	f001 fd96 	bl	80020b4 <HAL_TIM_PWM_Start>
  TIM8->CCR4 = STARTUP_PWM;
 8000588:	4b28      	ldr	r3, [pc, #160]	; (800062c <main+0x130>)
 800058a:	f649 12ea 	movw	r2, #39402	; 0x99ea
 800058e:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000590:	210c      	movs	r1, #12
 8000592:	4827      	ldr	r0, [pc, #156]	; (8000630 <main+0x134>)
 8000594:	f001 fd8e 	bl	80020b4 <HAL_TIM_PWM_Start>

  HAL_Delay(5000);
 8000598:	f241 3088 	movw	r0, #5000	; 0x1388
 800059c:	f000 fcc0 	bl	8000f20 <HAL_Delay>


  	TIM1->CCR1 = TO_PWM(1000);
 80005a0:	4b20      	ldr	r3, [pc, #128]	; (8000624 <main+0x128>)
 80005a2:	f246 6286 	movw	r2, #26246	; 0x6686
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005a8:	2100      	movs	r1, #0
 80005aa:	481f      	ldr	r0, [pc, #124]	; (8000628 <main+0x12c>)
 80005ac:	f001 fd82 	bl	80020b4 <HAL_TIM_PWM_Start>
    TIM1->CCR2 = TO_PWM(1100);
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <main+0x128>)
 80005b2:	f247 02c7 	movw	r2, #28871	; 0x70c7
 80005b6:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005b8:	2104      	movs	r1, #4
 80005ba:	481b      	ldr	r0, [pc, #108]	; (8000628 <main+0x12c>)
 80005bc:	f001 fd7a 	bl	80020b4 <HAL_TIM_PWM_Start>
    TIM1->CCR3 = TO_PWM(1200);
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <main+0x128>)
 80005c2:	f647 3208 	movw	r2, #31496	; 0x7b08
 80005c6:	63da      	str	r2, [r3, #60]	; 0x3c

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005c8:	2108      	movs	r1, #8
 80005ca:	4817      	ldr	r0, [pc, #92]	; (8000628 <main+0x12c>)
 80005cc:	f001 fd72 	bl	80020b4 <HAL_TIM_PWM_Start>
    TIM1->CCR4 = TO_PWM(1300);
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <main+0x128>)
 80005d2:	f248 5248 	movw	r2, #34120	; 0x8548
 80005d6:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005d8:	210c      	movs	r1, #12
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0x12c>)
 80005dc:	f001 fd6a 	bl	80020b4 <HAL_TIM_PWM_Start>

    TIM8->CCR1 = TO_PWM(1400);
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <main+0x130>)
 80005e2:	f648 7289 	movw	r2, #36745	; 0x8f89
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80005e8:	2100      	movs	r1, #0
 80005ea:	4811      	ldr	r0, [pc, #68]	; (8000630 <main+0x134>)
 80005ec:	f001 fd62 	bl	80020b4 <HAL_TIM_PWM_Start>
    TIM8->CCR2 = TO_PWM(1500);
 80005f0:	4b0e      	ldr	r3, [pc, #56]	; (800062c <main+0x130>)
 80005f2:	f649 12ca 	movw	r2, #39370	; 0x99ca
 80005f6:	639a      	str	r2, [r3, #56]	; 0x38

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80005f8:	2104      	movs	r1, #4
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <main+0x134>)
 80005fc:	f001 fd5a 	bl	80020b4 <HAL_TIM_PWM_Start>

    TIM8->CCR3 = TO_PWM(1600);
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <main+0x130>)
 8000602:	f24a 420a 	movw	r2, #41994	; 0xa40a
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000608:	2108      	movs	r1, #8
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <main+0x134>)
 800060c:	f001 fd52 	bl	80020b4 <HAL_TIM_PWM_Start>
    TIM8->CCR4 = TO_PWM(1700);
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <main+0x130>)
 8000612:	f64a 624b 	movw	r2, #44619	; 0xae4b
 8000616:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000618:	210c      	movs	r1, #12
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <main+0x134>)
 800061c:	f001 fd4a 	bl	80020b4 <HAL_TIM_PWM_Start>
  while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x124>
 8000622:	bf00      	nop
 8000624:	40010000 	.word	0x40010000
 8000628:	20000070 	.word	0x20000070
 800062c:	40010400 	.word	0x40010400
 8000630:	20000028 	.word	0x20000028

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2234      	movs	r2, #52	; 0x34
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fda0 	bl	8003188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b29      	ldr	r3, [pc, #164]	; (8000704 <SystemClock_Config+0xd0>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a28      	ldr	r2, [pc, #160]	; (8000704 <SystemClock_Config+0xd0>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b26      	ldr	r3, [pc, #152]	; (8000704 <SystemClock_Config+0xd0>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000674:	2300      	movs	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <SystemClock_Config+0xd4>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000694:	2302      	movs	r3, #2
 8000696:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2310      	movs	r3, #16
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a0:	2302      	movs	r3, #2
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 79;
 80006ac:	234f      	movs	r3, #79	; 0x4f
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 031c 	add.w	r3, r7, #28
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 f9b1 	bl	8001a28 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006cc:	f000 fa3e 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e6:	f107 0308 	add.w	r3, r7, #8
 80006ea:	2102      	movs	r1, #2
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 fecf 	bl	8001490 <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006f8:	f000 fa28 	bl	8000b4c <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3750      	adds	r7, #80	; 0x50
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40007000 	.word	0x40007000

0800070c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	; 0x58
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
 800073a:	615a      	str	r2, [r3, #20]
 800073c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2220      	movs	r2, #32
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f002 fd1f 	bl	8003188 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800074a:	4b50      	ldr	r3, [pc, #320]	; (800088c <MX_TIM1_Init+0x180>)
 800074c:	4a50      	ldr	r2, [pc, #320]	; (8000890 <MX_TIM1_Init+0x184>)
 800074e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3-1;
 8000750:	4b4e      	ldr	r3, [pc, #312]	; (800088c <MX_TIM1_Init+0x180>)
 8000752:	2202      	movs	r2, #2
 8000754:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b4d      	ldr	r3, [pc, #308]	; (800088c <MX_TIM1_Init+0x180>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800075c:	4b4b      	ldr	r3, [pc, #300]	; (800088c <MX_TIM1_Init+0x180>)
 800075e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000762:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b49      	ldr	r3, [pc, #292]	; (800088c <MX_TIM1_Init+0x180>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076a:	4b48      	ldr	r3, [pc, #288]	; (800088c <MX_TIM1_Init+0x180>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b46      	ldr	r3, [pc, #280]	; (800088c <MX_TIM1_Init+0x180>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000776:	4845      	ldr	r0, [pc, #276]	; (800088c <MX_TIM1_Init+0x180>)
 8000778:	f001 fbf4 	bl	8001f64 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000782:	f000 f9e3 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000790:	4619      	mov	r1, r3
 8000792:	483e      	ldr	r0, [pc, #248]	; (800088c <MX_TIM1_Init+0x180>)
 8000794:	f001 fe18 	bl	80023c8 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800079e:	f000 f9d5 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007a2:	483a      	ldr	r0, [pc, #232]	; (800088c <MX_TIM1_Init+0x180>)
 80007a4:	f001 fc2d 	bl	8002002 <HAL_TIM_PWM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007ae:	f000 f9cd 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007be:	4619      	mov	r1, r3
 80007c0:	4832      	ldr	r0, [pc, #200]	; (800088c <MX_TIM1_Init+0x180>)
 80007c2:	f002 f9d9 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007cc:	f000 f9be 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d0:	2360      	movs	r3, #96	; 0x60
 80007d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007dc:	2300      	movs	r3, #0
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	2200      	movs	r2, #0
 80007f2:	4619      	mov	r1, r3
 80007f4:	4825      	ldr	r0, [pc, #148]	; (800088c <MX_TIM1_Init+0x180>)
 80007f6:	f001 fd25 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000800:	f000 f9a4 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	2204      	movs	r2, #4
 800080a:	4619      	mov	r1, r3
 800080c:	481f      	ldr	r0, [pc, #124]	; (800088c <MX_TIM1_Init+0x180>)
 800080e:	f001 fd19 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000818:	f000 f998 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	2208      	movs	r2, #8
 8000822:	4619      	mov	r1, r3
 8000824:	4819      	ldr	r0, [pc, #100]	; (800088c <MX_TIM1_Init+0x180>)
 8000826:	f001 fd0d 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000830:	f000 f98c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	220c      	movs	r2, #12
 800083a:	4619      	mov	r1, r3
 800083c:	4813      	ldr	r0, [pc, #76]	; (800088c <MX_TIM1_Init+0x180>)
 800083e:	f001 fd01 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000848:	f000 f980 	bl	8000b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	4619      	mov	r1, r3
 800086e:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM1_Init+0x180>)
 8000870:	f002 f9fe 	bl	8002c70 <HAL_TIMEx_ConfigBreakDeadTime>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800087a:	f000 f967 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800087e:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM1_Init+0x180>)
 8000880:	f000 f9ca 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000884:	bf00      	nop
 8000886:	3758      	adds	r7, #88	; 0x58
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000070 	.word	0x20000070
 8000890:	40010000 	.word	0x40010000

08000894 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b096      	sub	sp, #88	; 0x58
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
 80008c0:	611a      	str	r2, [r3, #16]
 80008c2:	615a      	str	r2, [r3, #20]
 80008c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2220      	movs	r2, #32
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 fc5b 	bl	8003188 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008d2:	4b50      	ldr	r3, [pc, #320]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008d4:	4a50      	ldr	r2, [pc, #320]	; (8000a18 <MX_TIM8_Init+0x184>)
 80008d6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3-1;
 80008d8:	4b4e      	ldr	r3, [pc, #312]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008da:	2202      	movs	r2, #2
 80008dc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b4d      	ldr	r3, [pc, #308]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80008e4:	4b4b      	ldr	r3, [pc, #300]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ec:	4b49      	ldr	r3, [pc, #292]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80008f2:	4b48      	ldr	r3, [pc, #288]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b46      	ldr	r3, [pc, #280]	; (8000a14 <MX_TIM8_Init+0x180>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80008fe:	4845      	ldr	r0, [pc, #276]	; (8000a14 <MX_TIM8_Init+0x180>)
 8000900:	f001 fb30 	bl	8001f64 <HAL_TIM_Base_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800090a:	f000 f91f 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000912:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000918:	4619      	mov	r1, r3
 800091a:	483e      	ldr	r0, [pc, #248]	; (8000a14 <MX_TIM8_Init+0x180>)
 800091c:	f001 fd54 	bl	80023c8 <HAL_TIM_ConfigClockSource>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000926:	f000 f911 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800092a:	483a      	ldr	r0, [pc, #232]	; (8000a14 <MX_TIM8_Init+0x180>)
 800092c:	f001 fb69 	bl	8002002 <HAL_TIM_PWM_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000936:	f000 f909 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000946:	4619      	mov	r1, r3
 8000948:	4832      	ldr	r0, [pc, #200]	; (8000a14 <MX_TIM8_Init+0x180>)
 800094a:	f002 f915 	bl	8002b78 <HAL_TIMEx_MasterConfigSynchronization>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000954:	f000 f8fa 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000958:	2360      	movs	r3, #96	; 0x60
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	2200      	movs	r2, #0
 800097a:	4619      	mov	r1, r3
 800097c:	4825      	ldr	r0, [pc, #148]	; (8000a14 <MX_TIM8_Init+0x180>)
 800097e:	f001 fc61 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000988:	f000 f8e0 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000990:	2204      	movs	r2, #4
 8000992:	4619      	mov	r1, r3
 8000994:	481f      	ldr	r0, [pc, #124]	; (8000a14 <MX_TIM8_Init+0x180>)
 8000996:	f001 fc55 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80009a0:	f000 f8d4 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a8:	2208      	movs	r2, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	4819      	ldr	r0, [pc, #100]	; (8000a14 <MX_TIM8_Init+0x180>)
 80009ae:	f001 fc49 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80009b8:	f000 f8c8 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	220c      	movs	r2, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_TIM8_Init+0x180>)
 80009c6:	f001 fc3d 	bl	8002244 <HAL_TIM_PWM_ConfigChannel>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80009d0:	f000 f8bc 	bl	8000b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4807      	ldr	r0, [pc, #28]	; (8000a14 <MX_TIM8_Init+0x180>)
 80009f8:	f002 f93a 	bl	8002c70 <HAL_TIMEx_ConfigBreakDeadTime>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000a02:	f000 f8a3 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <MX_TIM8_Init+0x180>)
 8000a08:	f000 f906 	bl	8000c18 <HAL_TIM_MspPostInit>

}
 8000a0c:	bf00      	nop
 8000a0e:	3758      	adds	r7, #88	; 0x58
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000028 	.word	0x20000028
 8000a18:	40010400 	.word	0x40010400

08000a1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <MX_USART2_UART_Init+0x50>)
 8000a24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a42:	220c      	movs	r2, #12
 8000a44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a46:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a52:	4805      	ldr	r0, [pc, #20]	; (8000a68 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f002 f95e 	bl	8002d14 <HAL_UART_Init>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a5e:	f000 f875 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000b8 	.word	0x200000b8
 8000a6c:	40004400 	.word	0x40004400

08000a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
 8000a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	4a2c      	ldr	r2, [pc, #176]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	; 0x30
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	613b      	str	r3, [r7, #16]
 8000aa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	4a25      	ldr	r2, [pc, #148]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a17      	ldr	r2, [pc, #92]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_GPIO_Init+0xd0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2120      	movs	r1, #32
 8000afa:	4812      	ldr	r0, [pc, #72]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000afc:	f000 fcae 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_GPIO_Init+0xd8>)
 8000b18:	f000 fb0c 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MX_GPIO_Init+0xd4>)
 8000b34:	f000 fafe 	bl	8001134 <HAL_GPIO_Init>

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020800 	.word	0x40020800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b96:	2007      	movs	r0, #7
 8000b98:	f000 fa98 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40023800 	.word	0x40023800

08000ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a15      	ldr	r2, [pc, #84]	; (8000c0c <HAL_TIM_Base_MspInit+0x64>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10e      	bne.n	8000bd8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_TIM_Base_MspInit+0x68>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a13      	ldr	r2, [pc, #76]	; (8000c10 <HAL_TIM_Base_MspInit+0x68>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <HAL_TIM_Base_MspInit+0x68>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000bd6:	e012      	b.n	8000bfe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_TIM_Base_MspInit+0x6c>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d10d      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_TIM_Base_MspInit+0x68>)
 8000be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bea:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <HAL_TIM_Base_MspInit+0x68>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <HAL_TIM_Base_MspInit+0x68>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40010000 	.word	0x40010000
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <HAL_TIM_MspPostInit+0xb4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d11f      	bne.n	8000c7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a23      	ldr	r2, [pc, #140]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c56:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c64:	2300      	movs	r3, #0
 8000c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4818      	ldr	r0, [pc, #96]	; (8000cd4 <HAL_TIM_MspPostInit+0xbc>)
 8000c74:	f000 fa5e 	bl	8001134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000c78:	e023      	b.n	8000cc2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_TIM_MspPostInit+0xc0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d11e      	bne.n	8000cc2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8c:	4a10      	ldr	r2, [pc, #64]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	6313      	str	r3, [r2, #48]	; 0x30
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <HAL_TIM_MspPostInit+0xb8>)
 8000c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000ca0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <HAL_TIM_MspPostInit+0xc4>)
 8000cbe:	f000 fa39 	bl	8001134 <HAL_GPIO_Init>
}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40010400 	.word	0x40010400
 8000cdc:	40020800 	.word	0x40020800

08000ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	; 0x28
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <HAL_UART_MspInit+0x84>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d12b      	bne.n	8000d5a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	613b      	str	r3, [r7, #16]
 8000d1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a10      	ldr	r2, [pc, #64]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_UART_MspInit+0x88>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4a:	2307      	movs	r3, #7
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <HAL_UART_MspInit+0x8c>)
 8000d56:	f000 f9ed 	bl	8001134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d5a:	bf00      	nop
 8000d5c:	3728      	adds	r7, #40	; 0x28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40004400 	.word	0x40004400
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f890 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <SystemInit+0x20>)
 8000dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <SystemInit+0x20>)
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e12:	f7ff ffd7 	bl	8000dc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f002 f993 	bl	8003140 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1a:	f7ff fb6f 	bl	80004fc <main>
  bx  lr    
 8000e1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e2c:	080031d8 	.word	0x080031d8
  ldr r2, =_sbss
 8000e30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e34:	20000100 	.word	0x20000100

08000e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e40:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0d      	ldr	r2, [pc, #52]	; (8000e7c <HAL_Init+0x40>)
 8000e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_Init+0x40>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_Init+0x40>)
 8000e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e58:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <HAL_Init+0x40>)
 8000e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e64:	2003      	movs	r0, #3
 8000e66:	f000 f931 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6a:	2000      	movs	r0, #0
 8000e6c:	f000 f808 	bl	8000e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e70:	f7ff fe72 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023c00 	.word	0x40023c00

08000e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x54>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <HAL_InitTick+0x58>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	4619      	mov	r1, r3
 8000e92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f93b 	bl	800111a <HAL_SYSTICK_Config>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e00e      	b.n	8000ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b0f      	cmp	r3, #15
 8000eb2:	d80a      	bhi.n	8000eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	6879      	ldr	r1, [r7, #4]
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	f000 f911 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_InitTick+0x5c>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	e000      	b.n	8000ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000000 	.word	0x20000000
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x20>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_IncTick+0x24>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <HAL_IncTick+0x24>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000008 	.word	0x20000008
 8000f04:	200000fc 	.word	0x200000fc

08000f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f0c:	4b03      	ldr	r3, [pc, #12]	; (8000f1c <HAL_GetTick+0x14>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200000fc 	.word	0x200000fc

08000f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f28:	f7ff ffee 	bl	8000f08 <HAL_GetTick>
 8000f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f38:	d005      	beq.n	8000f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_Delay+0x44>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f46:	bf00      	nop
 8000f48:	f7ff ffde 	bl	8000f08 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d8f7      	bhi.n	8000f48 <HAL_Delay+0x28>
  {
  }
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000008 	.word	0x20000008

08000f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f9a:	4a04      	ldr	r2, [pc, #16]	; (8000fac <__NVIC_SetPriorityGrouping+0x44>)
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	60d3      	str	r3, [r2, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3714      	adds	r7, #20
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	0a1b      	lsrs	r3, r3, #8
 8000fba:	f003 0307 	and.w	r3, r3, #7
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	6039      	str	r1, [r7, #0]
 8000fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	db0a      	blt.n	8000ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	490c      	ldr	r1, [pc, #48]	; (8001018 <__NVIC_SetPriority+0x4c>)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	0112      	lsls	r2, r2, #4
 8000fec:	b2d2      	uxtb	r2, r2
 8000fee:	440b      	add	r3, r1
 8000ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff4:	e00a      	b.n	800100c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4908      	ldr	r1, [pc, #32]	; (800101c <__NVIC_SetPriority+0x50>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	f003 030f 	and.w	r3, r3, #15
 8001002:	3b04      	subs	r3, #4
 8001004:	0112      	lsls	r2, r2, #4
 8001006:	b2d2      	uxtb	r2, r2
 8001008:	440b      	add	r3, r1
 800100a:	761a      	strb	r2, [r3, #24]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000e100 	.word	0xe000e100
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	; 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f1c3 0307 	rsb	r3, r3, #7
 800103a:	2b04      	cmp	r3, #4
 800103c:	bf28      	it	cs
 800103e:	2304      	movcs	r3, #4
 8001040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	3304      	adds	r3, #4
 8001046:	2b06      	cmp	r3, #6
 8001048:	d902      	bls.n	8001050 <NVIC_EncodePriority+0x30>
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3b03      	subs	r3, #3
 800104e:	e000      	b.n	8001052 <NVIC_EncodePriority+0x32>
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	f04f 32ff 	mov.w	r2, #4294967295
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43da      	mvns	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	401a      	ands	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	f04f 31ff 	mov.w	r1, #4294967295
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	43d9      	mvns	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	4313      	orrs	r3, r2
         );
}
 800107a:	4618      	mov	r0, r3
 800107c:	3724      	adds	r7, #36	; 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f7ff ff8e 	bl	8000fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff47 	bl	8000f68 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff5c 	bl	8000fb0 <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff8e 	bl	8001020 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5d 	bl	8000fcc <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffb0 	bl	8001088 <SysTick_Config>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e165      	b.n	800141c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8154 	bne.w	8001416 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	2b02      	cmp	r3, #2
 8001184:	d130      	bne.n	80011e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80ae 	beq.w	8001416 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b5d      	ldr	r3, [pc, #372]	; (8001434 <HAL_GPIO_Init+0x300>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a5c      	ldr	r2, [pc, #368]	; (8001434 <HAL_GPIO_Init+0x300>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_GPIO_Init+0x300>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d6:	4a58      	ldr	r2, [pc, #352]	; (8001438 <HAL_GPIO_Init+0x304>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4f      	ldr	r2, [pc, #316]	; (800143c <HAL_GPIO_Init+0x308>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x21a>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4e      	ldr	r2, [pc, #312]	; (8001440 <HAL_GPIO_Init+0x30c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x216>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_GPIO_Init+0x310>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x212>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_GPIO_Init+0x314>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x20e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4b      	ldr	r2, [pc, #300]	; (800144c <HAL_GPIO_Init+0x318>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x20a>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4a      	ldr	r2, [pc, #296]	; (8001450 <HAL_GPIO_Init+0x31c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x206>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a49      	ldr	r2, [pc, #292]	; (8001454 <HAL_GPIO_Init+0x320>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x202>
 8001332:	2306      	movs	r3, #6
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 8001336:	2307      	movs	r3, #7
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x21c>
 800134e:	2300      	movs	r3, #0
 8001350:	69fa      	ldr	r2, [r7, #28]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001360:	4935      	ldr	r1, [pc, #212]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800136e:	4b3a      	ldr	r3, [pc, #232]	; (8001458 <HAL_GPIO_Init+0x324>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	43db      	mvns	r3, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4013      	ands	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_GPIO_Init+0x324>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001398:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x324>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4013      	ands	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013bc:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013e6:	4a1c      	ldr	r2, [pc, #112]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <HAL_GPIO_Init+0x324>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4313      	orrs	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001410:	4a11      	ldr	r2, [pc, #68]	; (8001458 <HAL_GPIO_Init+0x324>)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3301      	adds	r3, #1
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	2b0f      	cmp	r3, #15
 8001420:	f67f ae96 	bls.w	8001150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3724      	adds	r7, #36	; 0x24
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40023800 	.word	0x40023800
 8001438:	40013800 	.word	0x40013800
 800143c:	40020000 	.word	0x40020000
 8001440:	40020400 	.word	0x40020400
 8001444:	40020800 	.word	0x40020800
 8001448:	40020c00 	.word	0x40020c00
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40021800 	.word	0x40021800
 8001458:	40013c00 	.word	0x40013c00

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e0cc      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014a4:	4b68      	ldr	r3, [pc, #416]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d90c      	bls.n	80014cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ba:	4b63      	ldr	r3, [pc, #396]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0b8      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014e4:	4b59      	ldr	r3, [pc, #356]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	4a58      	ldr	r2, [pc, #352]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014fc:	4b53      	ldr	r3, [pc, #332]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a52      	ldr	r2, [pc, #328]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001508:	4b50      	ldr	r3, [pc, #320]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	494d      	ldr	r1, [pc, #308]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001516:	4313      	orrs	r3, r2
 8001518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d044      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d119      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e07f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2b02      	cmp	r3, #2
 8001544:	d003      	beq.n	800154e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800154a:	2b03      	cmp	r3, #3
 800154c:	d107      	bne.n	800155e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d109      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e06f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155e:	4b3b      	ldr	r3, [pc, #236]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e067      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f023 0203 	bic.w	r2, r3, #3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4934      	ldr	r1, [pc, #208]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	4313      	orrs	r3, r2
 800157e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001580:	f7ff fcc2 	bl	8000f08 <HAL_GetTick>
 8001584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001586:	e00a      	b.n	800159e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001588:	f7ff fcbe 	bl	8000f08 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	f241 3288 	movw	r2, #5000	; 0x1388
 8001596:	4293      	cmp	r3, r2
 8001598:	d901      	bls.n	800159e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e04f      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 020c 	and.w	r2, r3, #12
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d1eb      	bne.n	8001588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b0:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d20c      	bcs.n	80015d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 030f 	and.w	r3, r3, #15
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d001      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e032      	b.n	800163e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	4916      	ldr	r1, [pc, #88]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d009      	beq.n	8001616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	490e      	ldr	r1, [pc, #56]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	4313      	orrs	r3, r2
 8001614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001616:	f000 f855 	bl	80016c4 <HAL_RCC_GetSysClockFreq>
 800161a:	4602      	mov	r2, r0
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	490a      	ldr	r1, [pc, #40]	; (8001650 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	5ccb      	ldrb	r3, [r1, r3]
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_RCC_ClockConfig+0x1c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc22 	bl	8000e80 <HAL_InitTick>

  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023c00 	.word	0x40023c00
 800164c:	40023800 	.word	0x40023800
 8001650:	080031b0 	.word	0x080031b0
 8001654:	20000000 	.word	0x20000000
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_RCC_GetHCLKFreq+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000

08001674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001678:	f7ff fff0 	bl	800165c <HAL_RCC_GetHCLKFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	4b05      	ldr	r3, [pc, #20]	; (8001694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	0a9b      	lsrs	r3, r3, #10
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	4903      	ldr	r1, [pc, #12]	; (8001698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001690:	4618      	mov	r0, r3
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40023800 	.word	0x40023800
 8001698:	080031c0 	.word	0x080031c0

0800169c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016a0:	f7ff ffdc 	bl	800165c <HAL_RCC_GetHCLKFreq>
 80016a4:	4602      	mov	r2, r0
 80016a6:	4b05      	ldr	r3, [pc, #20]	; (80016bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	0b5b      	lsrs	r3, r3, #13
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	4903      	ldr	r1, [pc, #12]	; (80016c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016b2:	5ccb      	ldrb	r3, [r1, r3]
 80016b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	080031c0 	.word	0x080031c0

080016c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016e0:	4bce      	ldr	r3, [pc, #824]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	f200 818d 	bhi.w	8001a08 <HAL_RCC_GetSysClockFreq+0x344>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_RCC_GetSysClockFreq+0x30>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	08001729 	.word	0x08001729
 80016f8:	08001a09 	.word	0x08001a09
 80016fc:	08001a09 	.word	0x08001a09
 8001700:	08001a09 	.word	0x08001a09
 8001704:	0800172f 	.word	0x0800172f
 8001708:	08001a09 	.word	0x08001a09
 800170c:	08001a09 	.word	0x08001a09
 8001710:	08001a09 	.word	0x08001a09
 8001714:	08001735 	.word	0x08001735
 8001718:	08001a09 	.word	0x08001a09
 800171c:	08001a09 	.word	0x08001a09
 8001720:	08001a09 	.word	0x08001a09
 8001724:	080018a9 	.word	0x080018a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001728:	4bbd      	ldr	r3, [pc, #756]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x35c>)
 800172a:	61bb      	str	r3, [r7, #24]
       break;
 800172c:	e16f      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800172e:	4bbd      	ldr	r3, [pc, #756]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x360>)
 8001730:	61bb      	str	r3, [r7, #24]
      break;
 8001732:	e16c      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001734:	4bb9      	ldr	r3, [pc, #740]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800173c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800173e:	4bb7      	ldr	r3, [pc, #732]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d053      	beq.n	80017f2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800174a:	4bb4      	ldr	r3, [pc, #720]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	099b      	lsrs	r3, r3, #6
 8001750:	461a      	mov	r2, r3
 8001752:	f04f 0300 	mov.w	r3, #0
 8001756:	f240 10ff 	movw	r0, #511	; 0x1ff
 800175a:	f04f 0100 	mov.w	r1, #0
 800175e:	ea02 0400 	and.w	r4, r2, r0
 8001762:	603c      	str	r4, [r7, #0]
 8001764:	400b      	ands	r3, r1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	e9d7 4500 	ldrd	r4, r5, [r7]
 800176c:	4620      	mov	r0, r4
 800176e:	4629      	mov	r1, r5
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	014b      	lsls	r3, r1, #5
 800177a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800177e:	0142      	lsls	r2, r0, #5
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	4623      	mov	r3, r4
 8001786:	1ac0      	subs	r0, r0, r3
 8001788:	462b      	mov	r3, r5
 800178a:	eb61 0103 	sbc.w	r1, r1, r3
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	f04f 0300 	mov.w	r3, #0
 8001796:	018b      	lsls	r3, r1, #6
 8001798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800179c:	0182      	lsls	r2, r0, #6
 800179e:	1a12      	subs	r2, r2, r0
 80017a0:	eb63 0301 	sbc.w	r3, r3, r1
 80017a4:	f04f 0000 	mov.w	r0, #0
 80017a8:	f04f 0100 	mov.w	r1, #0
 80017ac:	00d9      	lsls	r1, r3, #3
 80017ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80017b2:	00d0      	lsls	r0, r2, #3
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4621      	mov	r1, r4
 80017ba:	1852      	adds	r2, r2, r1
 80017bc:	4629      	mov	r1, r5
 80017be:	eb43 0101 	adc.w	r1, r3, r1
 80017c2:	460b      	mov	r3, r1
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	0259      	lsls	r1, r3, #9
 80017ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80017d2:	0250      	lsls	r0, r2, #9
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	461a      	mov	r2, r3
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f7fe fd0e 	bl	8000204 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	e04c      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f2:	4b8a      	ldr	r3, [pc, #552]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	099b      	lsrs	r3, r3, #6
 80017f8:	461a      	mov	r2, r3
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001802:	f04f 0100 	mov.w	r1, #0
 8001806:	ea02 0a00 	and.w	sl, r2, r0
 800180a:	ea03 0b01 	and.w	fp, r3, r1
 800180e:	4650      	mov	r0, sl
 8001810:	4659      	mov	r1, fp
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	014b      	lsls	r3, r1, #5
 800181c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001820:	0142      	lsls	r2, r0, #5
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	ebb0 000a 	subs.w	r0, r0, sl
 800182a:	eb61 010b 	sbc.w	r1, r1, fp
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	018b      	lsls	r3, r1, #6
 8001838:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800183c:	0182      	lsls	r2, r0, #6
 800183e:	1a12      	subs	r2, r2, r0
 8001840:	eb63 0301 	sbc.w	r3, r3, r1
 8001844:	f04f 0000 	mov.w	r0, #0
 8001848:	f04f 0100 	mov.w	r1, #0
 800184c:	00d9      	lsls	r1, r3, #3
 800184e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001852:	00d0      	lsls	r0, r2, #3
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	eb12 020a 	adds.w	r2, r2, sl
 800185c:	eb43 030b 	adc.w	r3, r3, fp
 8001860:	f04f 0000 	mov.w	r0, #0
 8001864:	f04f 0100 	mov.w	r1, #0
 8001868:	0299      	lsls	r1, r3, #10
 800186a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800186e:	0290      	lsls	r0, r2, #10
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	461a      	mov	r2, r3
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	f7fe fcc0 	bl	8000204 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800188c:	4b63      	ldr	r3, [pc, #396]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	0c1b      	lsrs	r3, r3, #16
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a4:	61bb      	str	r3, [r7, #24]
      break;
 80018a6:	e0b2      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018a8:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018b0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018b2:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d04d      	beq.n	800195a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018be:	4b57      	ldr	r3, [pc, #348]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	461a      	mov	r2, r3
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018ce:	f04f 0100 	mov.w	r1, #0
 80018d2:	ea02 0800 	and.w	r8, r2, r0
 80018d6:	ea03 0901 	and.w	r9, r3, r1
 80018da:	4640      	mov	r0, r8
 80018dc:	4649      	mov	r1, r9
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80018ec:	0142      	lsls	r2, r0, #5
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	ebb0 0008 	subs.w	r0, r0, r8
 80018f6:	eb61 0109 	sbc.w	r1, r1, r9
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001908:	0182      	lsls	r2, r0, #6
 800190a:	1a12      	subs	r2, r2, r0
 800190c:	eb63 0301 	sbc.w	r3, r3, r1
 8001910:	f04f 0000 	mov.w	r0, #0
 8001914:	f04f 0100 	mov.w	r1, #0
 8001918:	00d9      	lsls	r1, r3, #3
 800191a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800191e:	00d0      	lsls	r0, r2, #3
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	eb12 0208 	adds.w	r2, r2, r8
 8001928:	eb43 0309 	adc.w	r3, r3, r9
 800192c:	f04f 0000 	mov.w	r0, #0
 8001930:	f04f 0100 	mov.w	r1, #0
 8001934:	0259      	lsls	r1, r3, #9
 8001936:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800193a:	0250      	lsls	r0, r2, #9
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	461a      	mov	r2, r3
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f7fe fc5a 	bl	8000204 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	e04a      	b.n	80019f0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	461a      	mov	r2, r3
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	ea02 0400 	and.w	r4, r2, r0
 8001972:	ea03 0501 	and.w	r5, r3, r1
 8001976:	4620      	mov	r0, r4
 8001978:	4629      	mov	r1, r5
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	014b      	lsls	r3, r1, #5
 8001984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001988:	0142      	lsls	r2, r0, #5
 800198a:	4610      	mov	r0, r2
 800198c:	4619      	mov	r1, r3
 800198e:	1b00      	subs	r0, r0, r4
 8001990:	eb61 0105 	sbc.w	r1, r1, r5
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	018b      	lsls	r3, r1, #6
 800199e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019a2:	0182      	lsls	r2, r0, #6
 80019a4:	1a12      	subs	r2, r2, r0
 80019a6:	eb63 0301 	sbc.w	r3, r3, r1
 80019aa:	f04f 0000 	mov.w	r0, #0
 80019ae:	f04f 0100 	mov.w	r1, #0
 80019b2:	00d9      	lsls	r1, r3, #3
 80019b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019b8:	00d0      	lsls	r0, r2, #3
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	1912      	adds	r2, r2, r4
 80019c0:	eb45 0303 	adc.w	r3, r5, r3
 80019c4:	f04f 0000 	mov.w	r0, #0
 80019c8:	f04f 0100 	mov.w	r1, #0
 80019cc:	0299      	lsls	r1, r3, #10
 80019ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019d2:	0290      	lsls	r0, r2, #10
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	f7fe fc0e 	bl	8000204 <__aeabi_uldivmod>
 80019e8:	4602      	mov	r2, r0
 80019ea:	460b      	mov	r3, r1
 80019ec:	4613      	mov	r3, r2
 80019ee:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019f0:	4b0a      	ldr	r3, [pc, #40]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x358>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	0f1b      	lsrs	r3, r3, #28
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a04:	61bb      	str	r3, [r7, #24]
      break;
 8001a06:	e002      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a0a:	61bb      	str	r3, [r7, #24]
      break;
 8001a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a0e:	69bb      	ldr	r3, [r7, #24]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3720      	adds	r7, #32
 8001a14:	46bd      	mov	sp, r7
 8001a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e28d      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 8083 	beq.w	8001b4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a48:	4b94      	ldr	r3, [pc, #592]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 030c 	and.w	r3, r3, #12
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d019      	beq.n	8001a88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a54:	4b91      	ldr	r3, [pc, #580]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a5c:	2b08      	cmp	r3, #8
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a60:	4b8e      	ldr	r3, [pc, #568]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a6c:	d00c      	beq.n	8001a88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6e:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a76:	2b0c      	cmp	r3, #12
 8001a78:	d112      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a86:	d10b      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	4b84      	ldr	r3, [pc, #528]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d05b      	beq.n	8001b4c <HAL_RCC_OscConfig+0x124>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d157      	bne.n	8001b4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e25a      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d106      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x90>
 8001aaa:	4b7c      	ldr	r3, [pc, #496]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a7b      	ldr	r2, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e01d      	b.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0xb4>
 8001ac2:	4b76      	ldr	r3, [pc, #472]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b73      	ldr	r3, [pc, #460]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a72      	ldr	r2, [pc, #456]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e00b      	b.n	8001af4 <HAL_RCC_OscConfig+0xcc>
 8001adc:	4b6f      	ldr	r3, [pc, #444]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a6e      	ldr	r2, [pc, #440]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6b      	ldr	r2, [pc, #428]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afc:	f7ff fa04 	bl	8000f08 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fa00 	bl	8000f08 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	; 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e21f      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b16:	4b61      	ldr	r3, [pc, #388]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0f0      	beq.n	8001b04 <HAL_RCC_OscConfig+0xdc>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff f9f0 	bl	8000f08 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f9ec 	bl	8000f08 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b64      	cmp	r3, #100	; 0x64
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e20b      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x104>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06f      	beq.n	8001c3a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d017      	beq.n	8001b96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d105      	bne.n	8001b7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b72:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b86:	2b0c      	cmp	r3, #12
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x186>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1d3      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b3b      	ldr	r3, [pc, #236]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4937      	ldr	r1, [pc, #220]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e03a      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d020      	beq.n	8001c0e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_OscConfig+0x278>)
 8001bce:	2201      	movs	r2, #1
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f999 	bl	8000f08 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f995 	bl	8000f08 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1b4      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4925      	ldr	r1, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	600b      	str	r3, [r1, #0]
 8001c0c:	e015      	b.n	8001c3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <HAL_RCC_OscConfig+0x278>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f978 	bl	8000f08 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f974 	bl	8000f08 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e193      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c2e:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d036      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d016      	beq.n	8001c7c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <HAL_RCC_OscConfig+0x27c>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f958 	bl	8000f08 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f954 	bl	8000f08 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e173      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x274>)
 8001c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d0f0      	beq.n	8001c5c <HAL_RCC_OscConfig+0x234>
 8001c7a:	e01b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x27c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f941 	bl	8000f08 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c88:	e00e      	b.n	8001ca8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f93d 	bl	8000f08 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d907      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e15c      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	42470000 	.word	0x42470000
 8001ca4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	4b8a      	ldr	r3, [pc, #552]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1ea      	bne.n	8001c8a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0304 	and.w	r3, r3, #4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f000 8097 	beq.w	8001df0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc6:	4b83      	ldr	r3, [pc, #524]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10f      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b7f      	ldr	r3, [pc, #508]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a7e      	ldr	r2, [pc, #504]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b79      	ldr	r3, [pc, #484]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d118      	bne.n	8001d30 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b76      	ldr	r3, [pc, #472]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a75      	ldr	r2, [pc, #468]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0a:	f7ff f8fd 	bl	8000f08 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d12:	f7ff f8f9 	bl	8000f08 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e118      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d24:	4b6c      	ldr	r3, [pc, #432]	; (8001ed8 <HAL_RCC_OscConfig+0x4b0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d106      	bne.n	8001d46 <HAL_RCC_OscConfig+0x31e>
 8001d38:	4b66      	ldr	r3, [pc, #408]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a65      	ldr	r2, [pc, #404]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x340>
 8001d4e:	4b61      	ldr	r3, [pc, #388]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a60      	ldr	r2, [pc, #384]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b5e      	ldr	r3, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x358>
 8001d68:	4b5a      	ldr	r3, [pc, #360]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a59      	ldr	r2, [pc, #356]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b57      	ldr	r3, [pc, #348]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a56      	ldr	r2, [pc, #344]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f8be 	bl	8000f08 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f8ba 	bl	8000f08 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e0d7      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x368>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f8a8 	bl	8000f08 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f8a4 	bl	8000f08 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e0c1      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dd2:	4b40      	ldr	r3, [pc, #256]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d105      	bne.n	8001df0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de4:	4b3b      	ldr	r3, [pc, #236]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a3a      	ldr	r2, [pc, #232]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80ad 	beq.w	8001f54 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dfa:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d060      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d145      	bne.n	8001e9a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b33      	ldr	r3, [pc, #204]	; (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f878 	bl	8000f08 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e1c:	f7ff f874 	bl	8000f08 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e093      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2e:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	019b      	lsls	r3, r3, #6
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	085b      	lsrs	r3, r3, #1
 8001e52:	3b01      	subs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	061b      	lsls	r3, r3, #24
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	071b      	lsls	r3, r3, #28
 8001e66:	491b      	ldr	r1, [pc, #108]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff f849 	bl	8000f08 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7a:	f7ff f845 	bl	8000f08 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e064      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x452>
 8001e98:	e05c      	b.n	8001f54 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9a:	4b10      	ldr	r3, [pc, #64]	; (8001edc <HAL_RCC_OscConfig+0x4b4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f832 	bl	8000f08 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea8:	f7ff f82e 	bl	8000f08 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e04d      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eba:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_RCC_OscConfig+0x4ac>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x480>
 8001ec6:	e045      	b.n	8001f54 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e040      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <HAL_RCC_OscConfig+0x538>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d030      	beq.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d129      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d122      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f10:	4013      	ands	r3, r2
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d119      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	085b      	lsrs	r3, r3, #1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d10f      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e000      	b.n	8001f56 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e041      	b.n	8001ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fe0c 	bl	8000ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	f000 fad8 	bl	8002558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e041      	b.n	8002098 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d106      	bne.n	800202e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f839 	bl	80020a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2202      	movs	r2, #2
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	3304      	adds	r3, #4
 800203e:	4619      	mov	r1, r3
 8002040:	4610      	mov	r0, r2
 8002042:	f000 fa89 	bl	8002558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d109      	bne.n	80020d8 <HAL_TIM_PWM_Start+0x24>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	e022      	b.n	800211e <HAL_TIM_PWM_Start+0x6a>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	2b04      	cmp	r3, #4
 80020dc:	d109      	bne.n	80020f2 <HAL_TIM_PWM_Start+0x3e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	bf14      	ite	ne
 80020ea:	2301      	movne	r3, #1
 80020ec:	2300      	moveq	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	e015      	b.n	800211e <HAL_TIM_PWM_Start+0x6a>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d109      	bne.n	800210c <HAL_TIM_PWM_Start+0x58>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	bf14      	ite	ne
 8002104:	2301      	movne	r3, #1
 8002106:	2300      	moveq	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e008      	b.n	800211e <HAL_TIM_PWM_Start+0x6a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b01      	cmp	r3, #1
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e07c      	b.n	8002220 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d104      	bne.n	8002136 <HAL_TIM_PWM_Start+0x82>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002134:	e013      	b.n	800215e <HAL_TIM_PWM_Start+0xaa>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d104      	bne.n	8002146 <HAL_TIM_PWM_Start+0x92>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2202      	movs	r2, #2
 8002140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002144:	e00b      	b.n	800215e <HAL_TIM_PWM_Start+0xaa>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d104      	bne.n	8002156 <HAL_TIM_PWM_Start+0xa2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2202      	movs	r2, #2
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002154:	e003      	b.n	800215e <HAL_TIM_PWM_Start+0xaa>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2201      	movs	r2, #1
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fce0 	bl	8002b2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a2d      	ldr	r2, [pc, #180]	; (8002228 <HAL_TIM_PWM_Start+0x174>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d004      	beq.n	8002180 <HAL_TIM_PWM_Start+0xcc>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2c      	ldr	r2, [pc, #176]	; (800222c <HAL_TIM_PWM_Start+0x178>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_TIM_PWM_Start+0xd0>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_TIM_PWM_Start+0xd2>
 8002184:	2300      	movs	r3, #0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_TIM_PWM_Start+0x174>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ac:	d01d      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <HAL_TIM_PWM_Start+0x17c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d018      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1d      	ldr	r2, [pc, #116]	; (8002234 <HAL_TIM_PWM_Start+0x180>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1c      	ldr	r2, [pc, #112]	; (8002238 <HAL_TIM_PWM_Start+0x184>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00e      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_TIM_PWM_Start+0x178>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a18      	ldr	r2, [pc, #96]	; (800223c <HAL_TIM_PWM_Start+0x188>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d004      	beq.n	80021ea <HAL_TIM_PWM_Start+0x136>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <HAL_TIM_PWM_Start+0x18c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d010      	beq.n	800221e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800220c:	e007      	b.n	800221e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f042 0201 	orr.w	r2, r2, #1
 800221c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40010000 	.word	0x40010000
 800222c:	40010400 	.word	0x40010400
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40014000 	.word	0x40014000
 8002240:	40001800 	.word	0x40001800

08002244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
 800225c:	d101      	bne.n	8002262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800225e:	2302      	movs	r3, #2
 8002260:	e0ae      	b.n	80023c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2201      	movs	r2, #1
 8002266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b0c      	cmp	r3, #12
 800226e:	f200 809f 	bhi.w	80023b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	080022ad 	.word	0x080022ad
 800227c:	080023b1 	.word	0x080023b1
 8002280:	080023b1 	.word	0x080023b1
 8002284:	080023b1 	.word	0x080023b1
 8002288:	080022ed 	.word	0x080022ed
 800228c:	080023b1 	.word	0x080023b1
 8002290:	080023b1 	.word	0x080023b1
 8002294:	080023b1 	.word	0x080023b1
 8002298:	0800232f 	.word	0x0800232f
 800229c:	080023b1 	.word	0x080023b1
 80022a0:	080023b1 	.word	0x080023b1
 80022a4:	080023b1 	.word	0x080023b1
 80022a8:	0800236f 	.word	0x0800236f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f000 f9f0 	bl	8002698 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 0208 	orr.w	r2, r2, #8
 80022c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699a      	ldr	r2, [r3, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0204 	bic.w	r2, r2, #4
 80022d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6999      	ldr	r1, [r3, #24]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	619a      	str	r2, [r3, #24]
      break;
 80022ea:	e064      	b.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fa40 	bl	8002778 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699a      	ldr	r2, [r3, #24]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6999      	ldr	r1, [r3, #24]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	021a      	lsls	r2, r3, #8
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	619a      	str	r2, [r3, #24]
      break;
 800232c:	e043      	b.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fa95 	bl	8002864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69da      	ldr	r2, [r3, #28]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0208 	orr.w	r2, r2, #8
 8002348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69da      	ldr	r2, [r3, #28]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0204 	bic.w	r2, r2, #4
 8002358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	69d9      	ldr	r1, [r3, #28]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	430a      	orrs	r2, r1
 800236a:	61da      	str	r2, [r3, #28]
      break;
 800236c:	e023      	b.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68b9      	ldr	r1, [r7, #8]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fae9 	bl	800294c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69da      	ldr	r2, [r3, #28]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	69d9      	ldr	r1, [r3, #28]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	021a      	lsls	r2, r3, #8
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	61da      	str	r2, [r3, #28]
      break;
 80023ae:	e002      	b.n	80023b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	75fb      	strb	r3, [r7, #23]
      break;
 80023b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d101      	bne.n	80023e4 <HAL_TIM_ConfigClockSource+0x1c>
 80023e0:	2302      	movs	r3, #2
 80023e2:	e0b4      	b.n	800254e <HAL_TIM_ConfigClockSource+0x186>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800240a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800241c:	d03e      	beq.n	800249c <HAL_TIM_ConfigClockSource+0xd4>
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	f200 8087 	bhi.w	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 8002426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800242a:	f000 8086 	beq.w	800253a <HAL_TIM_ConfigClockSource+0x172>
 800242e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002432:	d87f      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b70      	cmp	r3, #112	; 0x70
 8002436:	d01a      	beq.n	800246e <HAL_TIM_ConfigClockSource+0xa6>
 8002438:	2b70      	cmp	r3, #112	; 0x70
 800243a:	d87b      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b60      	cmp	r3, #96	; 0x60
 800243e:	d050      	beq.n	80024e2 <HAL_TIM_ConfigClockSource+0x11a>
 8002440:	2b60      	cmp	r3, #96	; 0x60
 8002442:	d877      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 8002444:	2b50      	cmp	r3, #80	; 0x50
 8002446:	d03c      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0xfa>
 8002448:	2b50      	cmp	r3, #80	; 0x50
 800244a:	d873      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d058      	beq.n	8002502 <HAL_TIM_ConfigClockSource+0x13a>
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d86f      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 8002454:	2b30      	cmp	r3, #48	; 0x30
 8002456:	d064      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x15a>
 8002458:	2b30      	cmp	r3, #48	; 0x30
 800245a:	d86b      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 800245c:	2b20      	cmp	r3, #32
 800245e:	d060      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x15a>
 8002460:	2b20      	cmp	r3, #32
 8002462:	d867      	bhi.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05c      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x15a>
 8002468:	2b10      	cmp	r3, #16
 800246a:	d05a      	beq.n	8002522 <HAL_TIM_ConfigClockSource+0x15a>
 800246c:	e062      	b.n	8002534 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f000 fb35 	bl	8002aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	609a      	str	r2, [r3, #8]
      break;
 800249a:	e04f      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6818      	ldr	r0, [r3, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6899      	ldr	r1, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	f000 fb1e 	bl	8002aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024be:	609a      	str	r2, [r3, #8]
      break;
 80024c0:	e03c      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6859      	ldr	r1, [r3, #4]
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	461a      	mov	r2, r3
 80024d0:	f000 fa92 	bl	80029f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2150      	movs	r1, #80	; 0x50
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 faeb 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 80024e0:	e02c      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	461a      	mov	r2, r3
 80024f0:	f000 fab1 	bl	8002a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2160      	movs	r1, #96	; 0x60
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fadb 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002500:	e01c      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	461a      	mov	r2, r3
 8002510:	f000 fa72 	bl	80029f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2140      	movs	r1, #64	; 0x40
 800251a:	4618      	mov	r0, r3
 800251c:	f000 facb 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002520:	e00c      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4619      	mov	r1, r3
 800252c:	4610      	mov	r0, r2
 800252e:	f000 fac2 	bl	8002ab6 <TIM_ITRx_SetConfig>
      break;
 8002532:	e003      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	73fb      	strb	r3, [r7, #15]
      break;
 8002538:	e000      	b.n	800253c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800253a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800254c:	7bfb      	ldrb	r3, [r7, #15]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a40      	ldr	r2, [pc, #256]	; (800266c <TIM_Base_SetConfig+0x114>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002576:	d00f      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a3d      	ldr	r2, [pc, #244]	; (8002670 <TIM_Base_SetConfig+0x118>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a3c      	ldr	r2, [pc, #240]	; (8002674 <TIM_Base_SetConfig+0x11c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <TIM_Base_SetConfig+0x120>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x40>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a3a      	ldr	r2, [pc, #232]	; (800267c <TIM_Base_SetConfig+0x124>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a2f      	ldr	r2, [pc, #188]	; (800266c <TIM_Base_SetConfig+0x114>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d02b      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d027      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a2c      	ldr	r2, [pc, #176]	; (8002670 <TIM_Base_SetConfig+0x118>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d023      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a2b      	ldr	r2, [pc, #172]	; (8002674 <TIM_Base_SetConfig+0x11c>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d01f      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a2a      	ldr	r2, [pc, #168]	; (8002678 <TIM_Base_SetConfig+0x120>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d01b      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a29      	ldr	r2, [pc, #164]	; (800267c <TIM_Base_SetConfig+0x124>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d017      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <TIM_Base_SetConfig+0x128>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a27      	ldr	r2, [pc, #156]	; (8002684 <TIM_Base_SetConfig+0x12c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d00f      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <TIM_Base_SetConfig+0x130>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00b      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <TIM_Base_SetConfig+0x134>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a24      	ldr	r2, [pc, #144]	; (8002690 <TIM_Base_SetConfig+0x138>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d003      	beq.n	800260a <TIM_Base_SetConfig+0xb2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a23      	ldr	r2, [pc, #140]	; (8002694 <TIM_Base_SetConfig+0x13c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d108      	bne.n	800261c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002610:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4313      	orrs	r3, r2
 800261a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a0a      	ldr	r2, [pc, #40]	; (800266c <TIM_Base_SetConfig+0x114>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d003      	beq.n	8002650 <TIM_Base_SetConfig+0xf8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a0c      	ldr	r2, [pc, #48]	; (800267c <TIM_Base_SetConfig+0x124>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d103      	bne.n	8002658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	615a      	str	r2, [r3, #20]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40010000 	.word	0x40010000
 8002670:	40000400 	.word	0x40000400
 8002674:	40000800 	.word	0x40000800
 8002678:	40000c00 	.word	0x40000c00
 800267c:	40010400 	.word	0x40010400
 8002680:	40014000 	.word	0x40014000
 8002684:	40014400 	.word	0x40014400
 8002688:	40014800 	.word	0x40014800
 800268c:	40001800 	.word	0x40001800
 8002690:	40001c00 	.word	0x40001c00
 8002694:	40002000 	.word	0x40002000

08002698 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002698:	b480      	push	{r7}
 800269a:	b087      	sub	sp, #28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	f023 0201 	bic.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f023 0303 	bic.w	r3, r3, #3
 80026ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a20      	ldr	r2, [pc, #128]	; (8002770 <TIM_OC1_SetConfig+0xd8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d003      	beq.n	80026fc <TIM_OC1_SetConfig+0x64>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a1f      	ldr	r2, [pc, #124]	; (8002774 <TIM_OC1_SetConfig+0xdc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d10c      	bne.n	8002716 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 0308 	bic.w	r3, r3, #8
 8002702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f023 0304 	bic.w	r3, r3, #4
 8002714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <TIM_OC1_SetConfig+0xd8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_OC1_SetConfig+0x8e>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a14      	ldr	r2, [pc, #80]	; (8002774 <TIM_OC1_SetConfig+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d111      	bne.n	800274a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	621a      	str	r2, [r3, #32]
}
 8002764:	bf00      	nop
 8002766:	371c      	adds	r7, #28
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40010000 	.word	0x40010000
 8002774:	40010400 	.word	0x40010400

08002778 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b480      	push	{r7}
 800277a:	b087      	sub	sp, #28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	f023 0210 	bic.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	021b      	lsls	r3, r3, #8
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0320 	bic.w	r3, r3, #32
 80027c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a22      	ldr	r2, [pc, #136]	; (800285c <TIM_OC2_SetConfig+0xe4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d003      	beq.n	80027e0 <TIM_OC2_SetConfig+0x68>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a21      	ldr	r2, [pc, #132]	; (8002860 <TIM_OC2_SetConfig+0xe8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d10d      	bne.n	80027fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a17      	ldr	r2, [pc, #92]	; (800285c <TIM_OC2_SetConfig+0xe4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_OC2_SetConfig+0x94>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a16      	ldr	r2, [pc, #88]	; (8002860 <TIM_OC2_SetConfig+0xe8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d113      	bne.n	8002834 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800281a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40010000 	.word	0x40010000
 8002860:	40010400 	.word	0x40010400

08002864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <TIM_OC3_SetConfig+0xe0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d003      	beq.n	80028ca <TIM_OC3_SetConfig+0x66>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a20      	ldr	r2, [pc, #128]	; (8002948 <TIM_OC3_SetConfig+0xe4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10d      	bne.n	80028e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80028e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a16      	ldr	r2, [pc, #88]	; (8002944 <TIM_OC3_SetConfig+0xe0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_OC3_SetConfig+0x92>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a15      	ldr	r2, [pc, #84]	; (8002948 <TIM_OC3_SetConfig+0xe4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d113      	bne.n	800291e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	621a      	str	r2, [r3, #32]
}
 8002938:	bf00      	nop
 800293a:	371c      	adds	r7, #28
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40010000 	.word	0x40010000
 8002948:	40010400 	.word	0x40010400

0800294c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800297a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	021b      	lsls	r3, r3, #8
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002996:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	031b      	lsls	r3, r3, #12
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <TIM_OC4_SetConfig+0xa4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d003      	beq.n	80029b4 <TIM_OC4_SetConfig+0x68>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a11      	ldr	r2, [pc, #68]	; (80029f4 <TIM_OC4_SetConfig+0xa8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d109      	bne.n	80029c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	621a      	str	r2, [r3, #32]
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40010400 	.word	0x40010400

080029f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	f023 0201 	bic.w	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f023 030a 	bic.w	r3, r3, #10
 8002a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0210 	bic.w	r2, r3, #16
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	031b      	lsls	r3, r3, #12
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	621a      	str	r2, [r3, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f043 0307 	orr.w	r3, r3, #7
 8002ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	021a      	lsls	r2, r3, #8
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	609a      	str	r2, [r3, #8]
}
 8002b20:	bf00      	nop
 8002b22:	371c      	adds	r7, #28
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b087      	sub	sp, #28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	2201      	movs	r2, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a1a      	ldr	r2, [r3, #32]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1a      	ldr	r2, [r3, #32]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	fa01 f303 	lsl.w	r3, r1, r3
 8002b64:	431a      	orrs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
}
 8002b6a:	bf00      	nop
 8002b6c:	371c      	adds	r7, #28
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e05a      	b.n	8002c46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d022      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d01d      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1d      	ldr	r2, [pc, #116]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d018      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1b      	ldr	r2, [pc, #108]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1a      	ldr	r2, [pc, #104]	; (8002c60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00e      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d009      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d004      	beq.n	8002c1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10c      	bne.n	8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	40010000 	.word	0x40010000
 8002c58:	40000400 	.word	0x40000400
 8002c5c:	40000800 	.word	0x40000800
 8002c60:	40000c00 	.word	0x40000c00
 8002c64:	40010400 	.word	0x40010400
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40001800 	.word	0x40001800

08002c70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d101      	bne.n	8002c8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002c88:	2302      	movs	r3, #2
 8002c8a:	e03d      	b.n	8002d08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e03f      	b.n	8002da6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd ffd0 	bl	8000ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f829 	bl	8002db0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	b09f      	sub	sp, #124	; 0x7c
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc6:	68d9      	ldr	r1, [r3, #12]
 8002dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	ea40 0301 	orr.w	r3, r0, r1
 8002dd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	431a      	orrs	r2, r3
 8002de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002df4:	f021 010c 	bic.w	r1, r1, #12
 8002df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	6999      	ldr	r1, [r3, #24]
 8002e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	ea40 0301 	orr.w	r3, r0, r1
 8002e18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4bc5      	ldr	r3, [pc, #788]	; (8003134 <UART_SetConfig+0x384>)
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d004      	beq.n	8002e2e <UART_SetConfig+0x7e>
 8002e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4bc3      	ldr	r3, [pc, #780]	; (8003138 <UART_SetConfig+0x388>)
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d103      	bne.n	8002e36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e2e:	f7fe fc35 	bl	800169c <HAL_RCC_GetPCLK2Freq>
 8002e32:	6778      	str	r0, [r7, #116]	; 0x74
 8002e34:	e002      	b.n	8002e3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e36:	f7fe fc1d 	bl	8001674 <HAL_RCC_GetPCLK1Freq>
 8002e3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e44:	f040 80b6 	bne.w	8002fb4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4a:	461c      	mov	r4, r3
 8002e4c:	f04f 0500 	mov.w	r5, #0
 8002e50:	4622      	mov	r2, r4
 8002e52:	462b      	mov	r3, r5
 8002e54:	1891      	adds	r1, r2, r2
 8002e56:	6439      	str	r1, [r7, #64]	; 0x40
 8002e58:	415b      	adcs	r3, r3
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e60:	1912      	adds	r2, r2, r4
 8002e62:	eb45 0303 	adc.w	r3, r5, r3
 8002e66:	f04f 0000 	mov.w	r0, #0
 8002e6a:	f04f 0100 	mov.w	r1, #0
 8002e6e:	00d9      	lsls	r1, r3, #3
 8002e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e74:	00d0      	lsls	r0, r2, #3
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	1911      	adds	r1, r2, r4
 8002e7c:	6639      	str	r1, [r7, #96]	; 0x60
 8002e7e:	416b      	adcs	r3, r5
 8002e80:	667b      	str	r3, [r7, #100]	; 0x64
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	461a      	mov	r2, r3
 8002e88:	f04f 0300 	mov.w	r3, #0
 8002e8c:	1891      	adds	r1, r2, r2
 8002e8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e90:	415b      	adcs	r3, r3
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002e9c:	f7fd f9b2 	bl	8000204 <__aeabi_uldivmod>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	460b      	mov	r3, r1
 8002ea4:	4ba5      	ldr	r3, [pc, #660]	; (800313c <UART_SetConfig+0x38c>)
 8002ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8002eaa:	095b      	lsrs	r3, r3, #5
 8002eac:	011e      	lsls	r6, r3, #4
 8002eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb0:	461c      	mov	r4, r3
 8002eb2:	f04f 0500 	mov.w	r5, #0
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	462b      	mov	r3, r5
 8002eba:	1891      	adds	r1, r2, r2
 8002ebc:	6339      	str	r1, [r7, #48]	; 0x30
 8002ebe:	415b      	adcs	r3, r3
 8002ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ec6:	1912      	adds	r2, r2, r4
 8002ec8:	eb45 0303 	adc.w	r3, r5, r3
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	00d9      	lsls	r1, r3, #3
 8002ed6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002eda:	00d0      	lsls	r0, r2, #3
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	1911      	adds	r1, r2, r4
 8002ee2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ee4:	416b      	adcs	r3, r5
 8002ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	461a      	mov	r2, r3
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	1891      	adds	r1, r2, r2
 8002ef4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002ef6:	415b      	adcs	r3, r3
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002efa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002efe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002f02:	f7fd f97f 	bl	8000204 <__aeabi_uldivmod>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4b8c      	ldr	r3, [pc, #560]	; (800313c <UART_SetConfig+0x38c>)
 8002f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	2164      	movs	r1, #100	; 0x64
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	3332      	adds	r3, #50	; 0x32
 8002f1e:	4a87      	ldr	r2, [pc, #540]	; (800313c <UART_SetConfig+0x38c>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	095b      	lsrs	r3, r3, #5
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f2c:	441e      	add	r6, r3
 8002f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f30:	4618      	mov	r0, r3
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	1894      	adds	r4, r2, r2
 8002f3c:	623c      	str	r4, [r7, #32]
 8002f3e:	415b      	adcs	r3, r3
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f46:	1812      	adds	r2, r2, r0
 8002f48:	eb41 0303 	adc.w	r3, r1, r3
 8002f4c:	f04f 0400 	mov.w	r4, #0
 8002f50:	f04f 0500 	mov.w	r5, #0
 8002f54:	00dd      	lsls	r5, r3, #3
 8002f56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f5a:	00d4      	lsls	r4, r2, #3
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	462b      	mov	r3, r5
 8002f60:	1814      	adds	r4, r2, r0
 8002f62:	653c      	str	r4, [r7, #80]	; 0x50
 8002f64:	414b      	adcs	r3, r1
 8002f66:	657b      	str	r3, [r7, #84]	; 0x54
 8002f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	1891      	adds	r1, r2, r2
 8002f74:	61b9      	str	r1, [r7, #24]
 8002f76:	415b      	adcs	r3, r3
 8002f78:	61fb      	str	r3, [r7, #28]
 8002f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002f82:	f7fd f93f 	bl	8000204 <__aeabi_uldivmod>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <UART_SetConfig+0x38c>)
 8002f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002f90:	095b      	lsrs	r3, r3, #5
 8002f92:	2164      	movs	r1, #100	; 0x64
 8002f94:	fb01 f303 	mul.w	r3, r1, r3
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	3332      	adds	r3, #50	; 0x32
 8002f9e:	4a67      	ldr	r2, [pc, #412]	; (800313c <UART_SetConfig+0x38c>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	f003 0207 	and.w	r2, r3, #7
 8002faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4432      	add	r2, r6
 8002fb0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002fb2:	e0b9      	b.n	8003128 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb6:	461c      	mov	r4, r3
 8002fb8:	f04f 0500 	mov.w	r5, #0
 8002fbc:	4622      	mov	r2, r4
 8002fbe:	462b      	mov	r3, r5
 8002fc0:	1891      	adds	r1, r2, r2
 8002fc2:	6139      	str	r1, [r7, #16]
 8002fc4:	415b      	adcs	r3, r3
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fcc:	1912      	adds	r2, r2, r4
 8002fce:	eb45 0303 	adc.w	r3, r5, r3
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	00d9      	lsls	r1, r3, #3
 8002fdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fe0:	00d0      	lsls	r0, r2, #3
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	eb12 0804 	adds.w	r8, r2, r4
 8002fea:	eb43 0905 	adc.w	r9, r3, r5
 8002fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f04f 0100 	mov.w	r1, #0
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	008b      	lsls	r3, r1, #2
 8003002:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003006:	0082      	lsls	r2, r0, #2
 8003008:	4640      	mov	r0, r8
 800300a:	4649      	mov	r1, r9
 800300c:	f7fd f8fa 	bl	8000204 <__aeabi_uldivmod>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4b49      	ldr	r3, [pc, #292]	; (800313c <UART_SetConfig+0x38c>)
 8003016:	fba3 2302 	umull	r2, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	011e      	lsls	r6, r3, #4
 800301e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003020:	4618      	mov	r0, r3
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	1894      	adds	r4, r2, r2
 800302c:	60bc      	str	r4, [r7, #8]
 800302e:	415b      	adcs	r3, r3
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003036:	1812      	adds	r2, r2, r0
 8003038:	eb41 0303 	adc.w	r3, r1, r3
 800303c:	f04f 0400 	mov.w	r4, #0
 8003040:	f04f 0500 	mov.w	r5, #0
 8003044:	00dd      	lsls	r5, r3, #3
 8003046:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800304a:	00d4      	lsls	r4, r2, #3
 800304c:	4622      	mov	r2, r4
 800304e:	462b      	mov	r3, r5
 8003050:	1814      	adds	r4, r2, r0
 8003052:	64bc      	str	r4, [r7, #72]	; 0x48
 8003054:	414b      	adcs	r3, r1
 8003056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003058:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	f04f 0100 	mov.w	r1, #0
 8003062:	f04f 0200 	mov.w	r2, #0
 8003066:	f04f 0300 	mov.w	r3, #0
 800306a:	008b      	lsls	r3, r1, #2
 800306c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003070:	0082      	lsls	r2, r0, #2
 8003072:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003076:	f7fd f8c5 	bl	8000204 <__aeabi_uldivmod>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4b2f      	ldr	r3, [pc, #188]	; (800313c <UART_SetConfig+0x38c>)
 8003080:	fba3 1302 	umull	r1, r3, r3, r2
 8003084:	095b      	lsrs	r3, r3, #5
 8003086:	2164      	movs	r1, #100	; 0x64
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	3332      	adds	r3, #50	; 0x32
 8003092:	4a2a      	ldr	r2, [pc, #168]	; (800313c <UART_SetConfig+0x38c>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	095b      	lsrs	r3, r3, #5
 800309a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800309e:	441e      	add	r6, r3
 80030a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a2:	4618      	mov	r0, r3
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	1894      	adds	r4, r2, r2
 80030ae:	603c      	str	r4, [r7, #0]
 80030b0:	415b      	adcs	r3, r3
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b8:	1812      	adds	r2, r2, r0
 80030ba:	eb41 0303 	adc.w	r3, r1, r3
 80030be:	f04f 0400 	mov.w	r4, #0
 80030c2:	f04f 0500 	mov.w	r5, #0
 80030c6:	00dd      	lsls	r5, r3, #3
 80030c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80030cc:	00d4      	lsls	r4, r2, #3
 80030ce:	4622      	mov	r2, r4
 80030d0:	462b      	mov	r3, r5
 80030d2:	eb12 0a00 	adds.w	sl, r2, r0
 80030d6:	eb43 0b01 	adc.w	fp, r3, r1
 80030da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f04f 0100 	mov.w	r1, #0
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	008b      	lsls	r3, r1, #2
 80030ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030f2:	0082      	lsls	r2, r0, #2
 80030f4:	4650      	mov	r0, sl
 80030f6:	4659      	mov	r1, fp
 80030f8:	f7fd f884 	bl	8000204 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4b0e      	ldr	r3, [pc, #56]	; (800313c <UART_SetConfig+0x38c>)
 8003102:	fba3 1302 	umull	r1, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2164      	movs	r1, #100	; 0x64
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	3332      	adds	r3, #50	; 0x32
 8003114:	4a09      	ldr	r2, [pc, #36]	; (800313c <UART_SetConfig+0x38c>)
 8003116:	fba2 2303 	umull	r2, r3, r2, r3
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4432      	add	r2, r6
 8003126:	609a      	str	r2, [r3, #8]
}
 8003128:	bf00      	nop
 800312a:	377c      	adds	r7, #124	; 0x7c
 800312c:	46bd      	mov	sp, r7
 800312e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003132:	bf00      	nop
 8003134:	40011000 	.word	0x40011000
 8003138:	40011400 	.word	0x40011400
 800313c:	51eb851f 	.word	0x51eb851f

08003140 <__libc_init_array>:
 8003140:	b570      	push	{r4, r5, r6, lr}
 8003142:	4d0d      	ldr	r5, [pc, #52]	; (8003178 <__libc_init_array+0x38>)
 8003144:	4c0d      	ldr	r4, [pc, #52]	; (800317c <__libc_init_array+0x3c>)
 8003146:	1b64      	subs	r4, r4, r5
 8003148:	10a4      	asrs	r4, r4, #2
 800314a:	2600      	movs	r6, #0
 800314c:	42a6      	cmp	r6, r4
 800314e:	d109      	bne.n	8003164 <__libc_init_array+0x24>
 8003150:	4d0b      	ldr	r5, [pc, #44]	; (8003180 <__libc_init_array+0x40>)
 8003152:	4c0c      	ldr	r4, [pc, #48]	; (8003184 <__libc_init_array+0x44>)
 8003154:	f000 f820 	bl	8003198 <_init>
 8003158:	1b64      	subs	r4, r4, r5
 800315a:	10a4      	asrs	r4, r4, #2
 800315c:	2600      	movs	r6, #0
 800315e:	42a6      	cmp	r6, r4
 8003160:	d105      	bne.n	800316e <__libc_init_array+0x2e>
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	f855 3b04 	ldr.w	r3, [r5], #4
 8003168:	4798      	blx	r3
 800316a:	3601      	adds	r6, #1
 800316c:	e7ee      	b.n	800314c <__libc_init_array+0xc>
 800316e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003172:	4798      	blx	r3
 8003174:	3601      	adds	r6, #1
 8003176:	e7f2      	b.n	800315e <__libc_init_array+0x1e>
 8003178:	080031d0 	.word	0x080031d0
 800317c:	080031d0 	.word	0x080031d0
 8003180:	080031d0 	.word	0x080031d0
 8003184:	080031d4 	.word	0x080031d4

08003188 <memset>:
 8003188:	4402      	add	r2, r0
 800318a:	4603      	mov	r3, r0
 800318c:	4293      	cmp	r3, r2
 800318e:	d100      	bne.n	8003192 <memset+0xa>
 8003190:	4770      	bx	lr
 8003192:	f803 1b01 	strb.w	r1, [r3], #1
 8003196:	e7f9      	b.n	800318c <memset+0x4>

08003198 <_init>:
 8003198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319a:	bf00      	nop
 800319c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319e:	bc08      	pop	{r3}
 80031a0:	469e      	mov	lr, r3
 80031a2:	4770      	bx	lr

080031a4 <_fini>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr


PWM-kelpie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ae4  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cb8  08003cb8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cc0  08003cc0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003cd4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003cd4  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001128b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc3  00000000  00000000  000312c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  00033090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00033f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020261  00000000  00000000  00034cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010107  00000000  00000000  00054f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7869  00000000  00000000  00065040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012c8a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d04  00000000  00000000  0012c8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003c58 	.word	0x08003c58

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003c58 	.word	0x08003c58

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fafd 	bl	8000ac6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f820 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f95e 	bl	8000790 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f92c 	bl	8000730 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004d8:	f000 f87c 	bl	80005d4 <MX_TIM1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //arming 32467 0.0462 us/increment, arm for 1500us
  	  TIM1->CCR1 = 32467;
 80004dc:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <main+0x44>)
 80004de:	f647 62d3 	movw	r2, #32467	; 0x7ed3
 80004e2:	635a      	str	r2, [r3, #52]	; 0x34
  	  //TIM1->CCR2 = 40000;
  	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004e4:	2100      	movs	r1, #0
 80004e6:	4809      	ldr	r0, [pc, #36]	; (800050c <main+0x48>)
 80004e8:	f002 f846 	bl	8002578 <HAL_TIM_PWM_Start>
  	   HAL_Delay(5000);
 80004ec:	f241 3088 	movw	r0, #5000	; 0x1388
 80004f0:	f000 fb5e 	bl	8000bb0 <HAL_Delay>
  	 TIM1->CCR1 = PWMVALUE;//34632;//1600us
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <main+0x44>)
 80004f6:	f649 0231 	movw	r2, #38961	; 0x9831
 80004fa:	635a      	str	r2, [r3, #52]	; 0x34
  	   	  //TIM1->CCR2 = 40000;
  	   	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	4803      	ldr	r0, [pc, #12]	; (800050c <main+0x48>)
 8000500:	f002 f83a 	bl	8002578 <HAL_TIM_PWM_Start>
  while (1)
 8000504:	e7fe      	b.n	8000504 <main+0x40>
 8000506:	bf00      	nop
 8000508:	40012c00 	.word	0x40012c00
 800050c:	20000028 	.word	0x20000028

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f003 fb92 	bl	8003c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f000 fde5 	bl	8001104 <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f970 	bl	8000824 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f000 fdc0 	bl	80010c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <SystemClock_Config+0xc0>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SystemClock_Config+0xc0>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 65;
 8000578:	2341      	movs	r3, #65	; 0x41
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000584:	2304      	movs	r3, #4
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fe0f 	bl	80011b0 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000598:	f000 f944 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fa0d 	bl	80019d4 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005c0:	f000 f930 	bl	8000824 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005c4:	f001 fe1e 	bl	8002204 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09a      	sub	sp, #104	; 0x68
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	222c      	movs	r2, #44	; 0x2c
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fb1a 	bl	8003c48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000614:	4b44      	ldr	r3, [pc, #272]	; (8000728 <MX_TIM1_Init+0x154>)
 8000616:	4a45      	ldr	r2, [pc, #276]	; (800072c <MX_TIM1_Init+0x158>)
 8000618:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 800061a:	4b43      	ldr	r3, [pc, #268]	; (8000728 <MX_TIM1_Init+0x154>)
 800061c:	2202      	movs	r2, #2
 800061e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b41      	ldr	r3, [pc, #260]	; (8000728 <MX_TIM1_Init+0x154>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 54000-1;
 8000626:	4b40      	ldr	r3, [pc, #256]	; (8000728 <MX_TIM1_Init+0x154>)
 8000628:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 800062c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <MX_TIM1_Init+0x154>)
 8000630:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000634:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000636:	4b3c      	ldr	r3, [pc, #240]	; (8000728 <MX_TIM1_Init+0x154>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063c:	4b3a      	ldr	r3, [pc, #232]	; (8000728 <MX_TIM1_Init+0x154>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000642:	4839      	ldr	r0, [pc, #228]	; (8000728 <MX_TIM1_Init+0x154>)
 8000644:	f001 fee0 	bl	8002408 <HAL_TIM_Base_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800064e:	f000 f8e9 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000658:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065c:	4619      	mov	r1, r3
 800065e:	4832      	ldr	r0, [pc, #200]	; (8000728 <MX_TIM1_Init+0x154>)
 8000660:	f002 f97c 	bl	800295c <HAL_TIM_ConfigClockSource>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800066a:	f000 f8db 	bl	8000824 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800066e:	482e      	ldr	r0, [pc, #184]	; (8000728 <MX_TIM1_Init+0x154>)
 8000670:	f001 ff21 	bl	80024b6 <HAL_TIM_PWM_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800067a:	f000 f8d3 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067e:	2300      	movs	r3, #0
 8000680:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000682:	2300      	movs	r3, #0
 8000684:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000686:	2300      	movs	r3, #0
 8000688:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800068a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800068e:	4619      	mov	r1, r3
 8000690:	4825      	ldr	r0, [pc, #148]	; (8000728 <MX_TIM1_Init+0x154>)
 8000692:	f002 fdcf 	bl	8003234 <HAL_TIMEx_MasterConfigSynchronization>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800069c:	f000 f8c2 	bl	8000824 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006a0:	2360      	movs	r3, #96	; 0x60
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 100-1;
 80006a4:	2363      	movs	r3, #99	; 0x63
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a8:	2300      	movs	r3, #0
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	4818      	ldr	r0, [pc, #96]	; (8000728 <MX_TIM1_Init+0x154>)
 80006c6:	f002 f835 	bl	8002734 <HAL_TIM_PWM_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80006d0:	f000 f8a8 	bl	8000824 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	4619      	mov	r1, r3
 8000708:	4807      	ldr	r0, [pc, #28]	; (8000728 <MX_TIM1_Init+0x154>)
 800070a:	f002 fdf9 	bl	8003300 <HAL_TIMEx_ConfigBreakDeadTime>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000714:	f000 f886 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <MX_TIM1_Init+0x154>)
 800071a:	f000 f8cd 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 800071e:	bf00      	nop
 8000720:	3768      	adds	r7, #104	; 0x68
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000028 	.word	0x20000028
 800072c:	40012c00 	.word	0x40012c00

08000730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MX_USART2_UART_Init+0x5c>)
 8000738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART2_UART_Init+0x58>)
 8000774:	f002 fe3c 	bl	80033f0 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f851 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000074 	.word	0x20000074
 800078c:	40004400 	.word	0x40004400

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b1d      	ldr	r3, [pc, #116]	; (800081c <MX_GPIO_Init+0x8c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a1c      	ldr	r2, [pc, #112]	; (800081c <MX_GPIO_Init+0x8c>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <MX_GPIO_Init+0x8c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <MX_GPIO_Init+0x8c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <MX_GPIO_Init+0x8c>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_GPIO_Init+0x8c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_GPIO_Init+0x8c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <MX_GPIO_Init+0x8c>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_GPIO_Init+0x8c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0x90>)
 80007f4:	f000 fc50 	bl	8001098 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007f8:	2308      	movs	r3, #8
 80007fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fc:	2301      	movs	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	4619      	mov	r1, r3
 800080e:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_GPIO_Init+0x90>)
 8000810:	f000 fad8 	bl	8000dc4 <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000400 	.word	0x48000400

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_TIM_Base_MspInit+0x38>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10b      	bne.n	80008a2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_TIM_Base_MspInit+0x3c>)
 800088c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_TIM_Base_MspInit+0x3c>)
 8000890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000894:	6613      	str	r3, [r2, #96]	; 0x60
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_TIM_Base_MspInit+0x3c>)
 8000898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800089a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40012c00 	.word	0x40012c00
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a12      	ldr	r2, [pc, #72]	; (8000920 <HAL_TIM_MspPostInit+0x68>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d11d      	bne.n	8000916 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_TIM_MspPostInit+0x6c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4a11      	ldr	r2, [pc, #68]	; (8000924 <HAL_TIM_MspPostInit+0x6c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <HAL_TIM_MspPostInit+0x6c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000904:	2301      	movs	r3, #1
 8000906:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000912:	f000 fa57 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40012c00 	.word	0x40012c00
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09e      	sub	sp, #120	; 0x78
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	2254      	movs	r2, #84	; 0x54
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f003 f97d 	bl	8003c48 <memset>
  if(huart->Instance==USART2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <HAL_UART_MspInit+0xcc>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d148      	bne.n	80009ea <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fa59 	bl	8001e1c <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000970:	f7ff ff58 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 8000976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000978:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 800097a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097e:	6593      	str	r3, [r2, #88]	; 0x58
 8000980:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 8000982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 800098e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 8000992:	f043 0301 	orr.w	r3, r3, #1
 8000996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_UART_MspInit+0xd0>)
 800099a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009a4:	2304      	movs	r3, #4
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009b4:	2307      	movs	r3, #7
 80009b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009bc:	4619      	mov	r1, r3
 80009be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c2:	f000 f9ff 	bl	8000dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009d8:	2303      	movs	r3, #3
 80009da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 f9ed 	bl	8000dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3778      	adds	r7, #120	; 0x78
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40004400 	.word	0x40004400
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a48:	f000 f892 	bl	8000b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <SystemInit+0x20>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <SystemInit+0x20>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f7ff ffea 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	; (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	; (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	; (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	; (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f003 f8ad 	bl	8003c00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f7ff fd0d 	bl	80004c4 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000aac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ab8:	08003cc8 	.word	0x08003cc8
  ldr r2, =_sbss
 8000abc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac0:	200000fc 	.word	0x200000fc

08000ac4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <ADC1_IRQHandler>

08000ac6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000acc:	2300      	movs	r3, #0
 8000ace:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	f000 f943 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 f80e 	bl	8000af8 <HAL_InitTick>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	e001      	b.n	8000aec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae8:	f7ff fea2 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aec:	79fb      	ldrb	r3, [r7, #7]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d023      	beq.n	8000b54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <HAL_InitTick+0x70>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x6c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	4619      	mov	r1, r3
 8000b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f000 f941 	bl	8000daa <HAL_SYSTICK_Config>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10f      	bne.n	8000b4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d809      	bhi.n	8000b48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	f000 f919 	bl	8000d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_InitTick+0x74>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6013      	str	r3, [r2, #0]
 8000b46:	e007      	b.n	8000b58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e004      	b.n	8000b58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e001      	b.n	8000b58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b54:	2301      	movs	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000004 	.word	0x20000004

08000b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_IncTick+0x20>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_IncTick+0x24>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4413      	add	r3, r2
 8000b80:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <HAL_IncTick+0x24>)
 8000b82:	6013      	str	r3, [r2, #0]
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	20000008 	.word	0x20000008
 8000b94:	200000f8 	.word	0x200000f8

08000b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <HAL_GetTick+0x14>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	200000f8 	.word	0x200000f8

08000bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bb8:	f7ff ffee 	bl	8000b98 <HAL_GetTick>
 8000bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc8:	d005      	beq.n	8000bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <HAL_Delay+0x44>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bd6:	bf00      	nop
 8000bd8:	f7ff ffde 	bl	8000b98 <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d8f7      	bhi.n	8000bd8 <HAL_Delay+0x28>
  {
  }
}
 8000be8:	bf00      	nop
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008

08000bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c14:	4013      	ands	r3, r2
 8000c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	60d3      	str	r3, [r2, #12]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_GetPriorityGrouping+0x18>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	0a1b      	lsrs	r3, r3, #8
 8000c4a:	f003 0307 	and.w	r3, r3, #7
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff47 	bl	8000bf8 <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff5c 	bl	8000c40 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff ffb0 	bl	8000d18 <SysTick_Config>
 8000db8:	4603      	mov	r3, r0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dd2:	e148      	b.n	8001066 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	2101      	movs	r1, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8000de0:	4013      	ands	r3, r2
 8000de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 813a 	beq.w	8001060 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d005      	beq.n	8000e04 <HAL_GPIO_Init+0x40>
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0303 	and.w	r3, r3, #3
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d130      	bne.n	8000e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	2203      	movs	r2, #3
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	68da      	ldr	r2, [r3, #12]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	f003 0201 	and.w	r2, r3, #1
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	693a      	ldr	r2, [r7, #16]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d017      	beq.n	8000ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	2203      	movs	r2, #3
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689a      	ldr	r2, [r3, #8]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d123      	bne.n	8000ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	691a      	ldr	r2, [r3, #16]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f003 0307 	and.w	r3, r3, #7
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	08da      	lsrs	r2, r3, #3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3208      	adds	r2, #8
 8000ef0:	6939      	ldr	r1, [r7, #16]
 8000ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	2203      	movs	r2, #3
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0203 	and.w	r2, r3, #3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	f000 8094 	beq.w	8001060 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f38:	4b52      	ldr	r3, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x2c0>)
 8000f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3c:	4a51      	ldr	r2, [pc, #324]	; (8001084 <HAL_GPIO_Init+0x2c0>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	6613      	str	r3, [r2, #96]	; 0x60
 8000f44:	4b4f      	ldr	r3, [pc, #316]	; (8001084 <HAL_GPIO_Init+0x2c0>)
 8000f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f50:	4a4d      	ldr	r2, [pc, #308]	; (8001088 <HAL_GPIO_Init+0x2c4>)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	089b      	lsrs	r3, r3, #2
 8000f56:	3302      	adds	r3, #2
 8000f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f7a:	d00d      	beq.n	8000f98 <HAL_GPIO_Init+0x1d4>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4a43      	ldr	r2, [pc, #268]	; (800108c <HAL_GPIO_Init+0x2c8>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0x1d0>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4a42      	ldr	r2, [pc, #264]	; (8001090 <HAL_GPIO_Init+0x2cc>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_GPIO_Init+0x1cc>
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	e004      	b.n	8000f9a <HAL_GPIO_Init+0x1d6>
 8000f90:	2307      	movs	r3, #7
 8000f92:	e002      	b.n	8000f9a <HAL_GPIO_Init+0x1d6>
 8000f94:	2301      	movs	r3, #1
 8000f96:	e000      	b.n	8000f9a <HAL_GPIO_Init+0x1d6>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	f002 0203 	and.w	r2, r2, #3
 8000fa0:	0092      	lsls	r2, r2, #2
 8000fa2:	4093      	lsls	r3, r2
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000faa:	4937      	ldr	r1, [pc, #220]	; (8001088 <HAL_GPIO_Init+0x2c4>)
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	089b      	lsrs	r3, r3, #2
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb8:	4b36      	ldr	r3, [pc, #216]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fdc:	4a2d      	ldr	r2, [pc, #180]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fe2:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001006:	4a23      	ldr	r2, [pc, #140]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	2b00      	cmp	r3, #0
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	43db      	mvns	r3, r3
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	4013      	ands	r3, r2
 8001044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_GPIO_Init+0x2d0>)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	fa22 f303 	lsr.w	r3, r2, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	f47f aeaf 	bne.w	8000dd4 <HAL_GPIO_Init+0x10>
  }
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	371c      	adds	r7, #28
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	40010400 	.word	0x40010400

08001098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
 80010a4:	4613      	mov	r3, r2
 80010a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a8:	787b      	ldrb	r3, [r7, #1]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ae:	887a      	ldrh	r2, [r7, #2]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010d6:	6013      	str	r3, [r2, #0]
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40007000 	.word	0x40007000

080010e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40007000 	.word	0x40007000

08001104 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001112:	d130      	bne.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001114:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800111c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001120:	d038      	beq.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800112c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001130:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001132:	4b1d      	ldr	r3, [pc, #116]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2232      	movs	r2, #50	; 0x32
 8001138:	fb02 f303 	mul.w	r3, r2, r3
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800113e:	fba2 2303 	umull	r2, r3, r2, r3
 8001142:	0c9b      	lsrs	r3, r3, #18
 8001144:	3301      	adds	r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001148:	e002      	b.n	8001150 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3b01      	subs	r3, #1
 800114e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001158:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115c:	d102      	bne.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x60>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f2      	bne.n	800114a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001170:	d110      	bne.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e00f      	b.n	8001196 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800117e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001182:	d007      	beq.n	8001194 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800118c:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001192:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	3714      	adds	r7, #20
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40007000 	.word	0x40007000
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e3fe      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c2:	4ba1      	ldr	r3, [pc, #644]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011cc:	4b9e      	ldr	r3, [pc, #632]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0310 	and.w	r3, r3, #16
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 80e4 	beq.w	80013ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d007      	beq.n	80011fa <HAL_RCC_OscConfig+0x4a>
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	2b0c      	cmp	r3, #12
 80011ee:	f040 808b 	bne.w	8001308 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	f040 8087 	bne.w	8001308 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011fa:	4b93      	ldr	r3, [pc, #588]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x62>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e3d6      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1a      	ldr	r2, [r3, #32]
 8001216:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d004      	beq.n	800122c <HAL_RCC_OscConfig+0x7c>
 8001222:	4b89      	ldr	r3, [pc, #548]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800122a:	e005      	b.n	8001238 <HAL_RCC_OscConfig+0x88>
 800122c:	4b86      	ldr	r3, [pc, #536]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800122e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001238:	4293      	cmp	r3, r2
 800123a:	d223      	bcs.n	8001284 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fd8b 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e3b7      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001250:	4b7d      	ldr	r3, [pc, #500]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a7c      	ldr	r2, [pc, #496]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b7a      	ldr	r3, [pc, #488]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4977      	ldr	r1, [pc, #476]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126e:	4b76      	ldr	r3, [pc, #472]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	4972      	ldr	r1, [pc, #456]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]
 8001282:	e025      	b.n	80012d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001284:	4b70      	ldr	r3, [pc, #448]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6f      	ldr	r2, [pc, #444]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800128a:	f043 0308 	orr.w	r3, r3, #8
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	496a      	ldr	r1, [pc, #424]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a2:	4b69      	ldr	r3, [pc, #420]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	4965      	ldr	r1, [pc, #404]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d109      	bne.n	80012d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fd4b 	bl	8001d5c <RCC_SetFlashLatencyFromMSIRange>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e377      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d0:	f000 fc80 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b5c      	ldr	r3, [pc, #368]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	495a      	ldr	r1, [pc, #360]	; (800144c <HAL_RCC_OscConfig+0x29c>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	4a58      	ldr	r2, [pc, #352]	; (8001450 <HAL_RCC_OscConfig+0x2a0>)
 80012ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012f0:	4b58      	ldr	r3, [pc, #352]	; (8001454 <HAL_RCC_OscConfig+0x2a4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fbff 	bl	8000af8 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d052      	beq.n	80013aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	e35b      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	699b      	ldr	r3, [r3, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d032      	beq.n	8001376 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800131c:	f7ff fc3c 	bl	8000b98 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001324:	f7ff fc38 	bl	8000b98 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e344      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a40      	ldr	r2, [pc, #256]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	493b      	ldr	r1, [pc, #236]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001360:	4b39      	ldr	r3, [pc, #228]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	4936      	ldr	r1, [pc, #216]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
 8001374:	e01a      	b.n	80013ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001376:	4b34      	ldr	r3, [pc, #208]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a33      	ldr	r2, [pc, #204]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800137c:	f023 0301 	bic.w	r3, r3, #1
 8001380:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001382:	f7ff fc09 	bl	8000b98 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800138a:	f7ff fc05 	bl	8000b98 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e311      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800139c:	4b2a      	ldr	r3, [pc, #168]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x1da>
 80013a8:	e000      	b.n	80013ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d074      	beq.n	80014a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d005      	beq.n	80013ca <HAL_RCC_OscConfig+0x21a>
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	2b0c      	cmp	r3, #12
 80013c2:	d10e      	bne.n	80013e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d10b      	bne.n	80013e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ca:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d064      	beq.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d160      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e2ee      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ea:	d106      	bne.n	80013fa <HAL_RCC_OscConfig+0x24a>
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a15      	ldr	r2, [pc, #84]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 80013f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	e01d      	b.n	8001436 <HAL_RCC_OscConfig+0x286>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001402:	d10c      	bne.n	800141e <HAL_RCC_OscConfig+0x26e>
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800140a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e00b      	b.n	8001436 <HAL_RCC_OscConfig+0x286>
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_RCC_OscConfig+0x298>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d01c      	beq.n	8001478 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800143e:	f7ff fbab 	bl	8000b98 <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001444:	e011      	b.n	800146a <HAL_RCC_OscConfig+0x2ba>
 8001446:	bf00      	nop
 8001448:	40021000 	.word	0x40021000
 800144c:	08003c70 	.word	0x08003c70
 8001450:	20000000 	.word	0x20000000
 8001454:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff fb9e 	bl	8000b98 <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e2aa      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800146a:	4baf      	ldr	r3, [pc, #700]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0x2a8>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001478:	f7ff fb8e 	bl	8000b98 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff fb8a 	bl	8000b98 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e296      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001492:	4ba5      	ldr	r3, [pc, #660]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x2d0>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d060      	beq.n	8001570 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x310>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d119      	bne.n	80014ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d116      	bne.n	80014ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014c0:	4b99      	ldr	r3, [pc, #612]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d005      	beq.n	80014d8 <HAL_RCC_OscConfig+0x328>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e273      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b93      	ldr	r3, [pc, #588]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	061b      	lsls	r3, r3, #24
 80014e6:	4990      	ldr	r1, [pc, #576]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ec:	e040      	b.n	8001570 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d023      	beq.n	800153e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a8b      	ldr	r2, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff fb49 	bl	8000b98 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800150a:	f7ff fb45 	bl	8000b98 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e251      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800151c:	4b82      	ldr	r3, [pc, #520]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001528:	4b7f      	ldr	r3, [pc, #508]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	497c      	ldr	r1, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
 800153c:	e018      	b.n	8001570 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153e:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a79      	ldr	r2, [pc, #484]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fb25 	bl	8000b98 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001552:	f7ff fb21 	bl	8000b98 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e22d      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001564:	4b70      	ldr	r3, [pc, #448]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d03c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d01c      	beq.n	80015be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800158a:	4a67      	ldr	r2, [pc, #412]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff fb00 	bl	8000b98 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff fafc 	bl	8000b98 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e208      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ae:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0ef      	beq.n	800159c <HAL_RCC_OscConfig+0x3ec>
 80015bc:	e01b      	b.n	80015f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015be:	4b5a      	ldr	r3, [pc, #360]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015c4:	4a58      	ldr	r2, [pc, #352]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015c6:	f023 0301 	bic.w	r3, r3, #1
 80015ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ce:	f7ff fae3 	bl	8000b98 <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d6:	f7ff fadf 	bl	8000b98 <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1eb      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015e8:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80015ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ef      	bne.n	80015d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80a6 	beq.w	8001750 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10d      	bne.n	8001630 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	4a43      	ldr	r2, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161e:	6593      	str	r3, [r2, #88]	; 0x58
 8001620:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162c:	2301      	movs	r3, #1
 800162e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d118      	bne.n	800166e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a3a      	ldr	r2, [pc, #232]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001648:	f7ff faa6 	bl	8000b98 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001650:	f7ff faa2 	bl	8000b98 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e1ae      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <HAL_RCC_OscConfig+0x57c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d0f0      	beq.n	8001650 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d108      	bne.n	8001688 <HAL_RCC_OscConfig+0x4d8>
 8001676:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167c:	4a2a      	ldr	r2, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001686:	e024      	b.n	80016d2 <HAL_RCC_OscConfig+0x522>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b05      	cmp	r3, #5
 800168e:	d110      	bne.n	80016b2 <HAL_RCC_OscConfig+0x502>
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001696:	4a24      	ldr	r2, [pc, #144]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a6:	4a20      	ldr	r2, [pc, #128]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b0:	e00f      	b.n	80016d2 <HAL_RCC_OscConfig+0x522>
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	4a17      	ldr	r2, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016ca:	f023 0304 	bic.w	r3, r3, #4
 80016ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d016      	beq.n	8001708 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016da:	f7ff fa5d 	bl	8000b98 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff fa59 	bl	8000b98 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e163      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_RCC_OscConfig+0x578>)
 80016fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0ed      	beq.n	80016e2 <HAL_RCC_OscConfig+0x532>
 8001706:	e01a      	b.n	800173e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001708:	f7ff fa46 	bl	8000b98 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800170e:	e00f      	b.n	8001730 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff fa42 	bl	8000b98 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	; 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d906      	bls.n	8001730 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e14c      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001730:	4ba5      	ldr	r3, [pc, #660]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1e8      	bne.n	8001710 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800173e:	7ffb      	ldrb	r3, [r7, #31]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d105      	bne.n	8001750 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001744:	4ba0      	ldr	r3, [pc, #640]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	4a9f      	ldr	r2, [pc, #636]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 800174a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01c      	beq.n	800179e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001764:	4b98      	ldr	r3, [pc, #608]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176a:	4a97      	ldr	r2, [pc, #604]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fa10 	bl	8000b98 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177c:	f7ff fa0c 	bl	8000b98 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e118      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800178e:	4b8e      	ldr	r3, [pc, #568]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ef      	beq.n	800177c <HAL_RCC_OscConfig+0x5cc>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80017a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a4:	4a88      	ldr	r2, [pc, #544]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9f3 	bl	8000b98 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b6:	f7ff f9ef 	bl	8000b98 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0fb      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017c8:	4b7f      	ldr	r3, [pc, #508]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80017ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ef      	bne.n	80017b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f000 80ef 	beq.w	80019be <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	f040 80c5 	bne.w	8001974 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017ea:	4b77      	ldr	r3, [pc, #476]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d12c      	bne.n	8001858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	3b01      	subs	r3, #1
 800180a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180c:	429a      	cmp	r2, r3
 800180e:	d123      	bne.n	8001858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d11b      	bne.n	8001858 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d113      	bne.n	8001858 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183a:	085b      	lsrs	r3, r3, #1
 800183c:	3b01      	subs	r3, #1
 800183e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001840:	429a      	cmp	r2, r3
 8001842:	d109      	bne.n	8001858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	3b01      	subs	r3, #1
 8001852:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001854:	429a      	cmp	r2, r3
 8001856:	d067      	beq.n	8001928 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d062      	beq.n	8001924 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800185e:	4b5a      	ldr	r3, [pc, #360]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e0a8      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800186e:	4b56      	ldr	r3, [pc, #344]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a55      	ldr	r2, [pc, #340]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001874:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001878:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800187a:	f7ff f98d 	bl	8000b98 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001882:	f7ff f989 	bl	8000b98 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e095      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80018a2:	68da      	ldr	r2, [r3, #12]
 80018a4:	4b49      	ldr	r3, [pc, #292]	; (80019cc <HAL_RCC_OscConfig+0x81c>)
 80018a6:	4013      	ands	r3, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018b0:	3a01      	subs	r2, #1
 80018b2:	0112      	lsls	r2, r2, #4
 80018b4:	4311      	orrs	r1, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80018ba:	0212      	lsls	r2, r2, #8
 80018bc:	4311      	orrs	r1, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80018c2:	0852      	lsrs	r2, r2, #1
 80018c4:	3a01      	subs	r2, #1
 80018c6:	0552      	lsls	r2, r2, #21
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018ce:	0852      	lsrs	r2, r2, #1
 80018d0:	3a01      	subs	r2, #1
 80018d2:	0652      	lsls	r2, r2, #25
 80018d4:	4311      	orrs	r1, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018da:	06d2      	lsls	r2, r2, #27
 80018dc:	430a      	orrs	r2, r1
 80018de:	493a      	ldr	r1, [pc, #232]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018e4:	4b38      	ldr	r3, [pc, #224]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f0:	4b35      	ldr	r3, [pc, #212]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	4a34      	ldr	r2, [pc, #208]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80018f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018fc:	f7ff f94c 	bl	8000b98 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001904:	f7ff f948 	bl	8000b98 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b02      	cmp	r3, #2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e054      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001916:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d0f0      	beq.n	8001904 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001922:	e04c      	b.n	80019be <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e04b      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001928:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d144      	bne.n	80019be <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800193e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800194a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800194c:	f7ff f924 	bl	8000b98 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f920 	bl	8000b98 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e02c      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f0      	beq.n	8001954 <HAL_RCC_OscConfig+0x7a4>
 8001972:	e024      	b.n	80019be <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d01f      	beq.n	80019ba <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 8001980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f907 	bl	8000b98 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f903 	bl	8000b98 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e00f      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4905      	ldr	r1, [pc, #20]	; (80019c8 <HAL_RCC_OscConfig+0x818>)
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <HAL_RCC_OscConfig+0x820>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
 80019b8:	e001      	b.n	80019be <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e000      	b.n	80019c0 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000
 80019cc:	019d808c 	.word	0x019d808c
 80019d0:	feeefffc 	.word	0xfeeefffc

080019d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e0e7      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e8:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d910      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f6:	4b72      	ldr	r3, [pc, #456]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 0207 	bic.w	r2, r3, #7
 80019fe:	4970      	ldr	r1, [pc, #448]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b6e      	ldr	r3, [pc, #440]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0cf      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d010      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	4b66      	ldr	r3, [pc, #408]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d908      	bls.n	8001a46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a34:	4b63      	ldr	r3, [pc, #396]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4960      	ldr	r1, [pc, #384]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04c      	beq.n	8001aec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	4b5a      	ldr	r3, [pc, #360]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d121      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e0a6      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d107      	bne.n	8001a82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d115      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e09a      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d107      	bne.n	8001a9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d109      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e08e      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e086      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f023 0203 	bic.w	r2, r3, #3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	4943      	ldr	r1, [pc, #268]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001abc:	f7ff f86c 	bl	8000b98 <HAL_GetTick>
 8001ac0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	e00a      	b.n	8001ada <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff f868 	bl	8000b98 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e06e      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 020c 	and.w	r2, r3, #12
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d1eb      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d010      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d208      	bcs.n	8001b1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	492b      	ldr	r1, [pc, #172]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b16:	4313      	orrs	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d210      	bcs.n	8001b4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b28:	4b25      	ldr	r3, [pc, #148]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f023 0207 	bic.w	r2, r3, #7
 8001b30:	4923      	ldr	r1, [pc, #140]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCC_ClockConfig+0x1ec>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e036      	b.n	8001bb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d008      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b56:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	4918      	ldr	r1, [pc, #96]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4910      	ldr	r1, [pc, #64]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b88:	f000 f824 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 030f 	and.w	r3, r3, #15
 8001b98:	490b      	ldr	r1, [pc, #44]	; (8001bc8 <HAL_RCC_ClockConfig+0x1f4>)
 8001b9a:	5ccb      	ldrb	r3, [r1, r3]
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1f8>)
 8001ba6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_RCC_ClockConfig+0x1fc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe ffa3 	bl	8000af8 <HAL_InitTick>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bb6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40022000 	.word	0x40022000
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	08003c70 	.word	0x08003c70
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000004 	.word	0x20000004

08001bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001be2:	4b3e      	ldr	r3, [pc, #248]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bec:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x34>
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b0c      	cmp	r3, #12
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d11e      	bne.n	8001c46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c08:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0308 	and.w	r3, r3, #8
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 030f 	and.w	r3, r3, #15
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e005      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c24:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 030f 	and.w	r3, r3, #15
 8001c2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c30:	4a2b      	ldr	r2, [pc, #172]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10d      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c4c:	4b25      	ldr	r3, [pc, #148]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	e004      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d101      	bne.n	8001c5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	d134      	bne.n	8001ccc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0xa6>
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d003      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0xac>
 8001c78:	e005      	b.n	8001c86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c7c:	617b      	str	r3, [r7, #20]
      break;
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c82:	617b      	str	r3, [r7, #20]
      break;
 8001c84:	e002      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	617b      	str	r3, [r7, #20]
      break;
 8001c8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	091b      	lsrs	r3, r3, #4
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	3301      	adds	r3, #1
 8001c98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	fb02 f203 	mul.w	r2, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	0e5b      	lsrs	r3, r3, #25
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ccc:	69bb      	ldr	r3, [r7, #24]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	08003c88 	.word	0x08003c88
 8001ce4:	00f42400 	.word	0x00f42400
 8001ce8:	007a1200 	.word	0x007a1200

08001cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	20000000 	.word	0x20000000

08001d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d08:	f7ff fff0 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4904      	ldr	r1, [pc, #16]	; (8001d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d1a:	5ccb      	ldrb	r3, [r1, r3]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	08003c80 	.word	0x08003c80

08001d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d34:	f7ff ffda 	bl	8001cec <HAL_RCC_GetHCLKFreq>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0adb      	lsrs	r3, r3, #11
 8001d40:	f003 0307 	and.w	r3, r3, #7
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d46:	5ccb      	ldrb	r3, [r1, r3]
 8001d48:	f003 031f 	and.w	r3, r3, #31
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08003c80 	.word	0x08003c80

08001d5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d74:	f7ff f9b8 	bl	80010e8 <HAL_PWREx_GetVoltageRange>
 8001d78:	6178      	str	r0, [r7, #20]
 8001d7a:	e014      	b.n	8001da6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d94:	f7ff f9a8 	bl	80010e8 <HAL_PWREx_GetVoltageRange>
 8001d98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dac:	d10b      	bne.n	8001dc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b80      	cmp	r3, #128	; 0x80
 8001db2:	d919      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2ba0      	cmp	r3, #160	; 0xa0
 8001db8:	d902      	bls.n	8001dc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dba:	2302      	movs	r3, #2
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e013      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e010      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b80      	cmp	r3, #128	; 0x80
 8001dca:	d902      	bls.n	8001dd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001dcc:	2303      	movs	r3, #3
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	e00a      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d102      	bne.n	8001dde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd8:	2302      	movs	r3, #2
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	e004      	b.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b70      	cmp	r3, #112	; 0x70
 8001de2:	d101      	bne.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de4:	2301      	movs	r3, #1
 8001de6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f023 0207 	bic.w	r2, r3, #7
 8001df0:	4909      	ldr	r1, [pc, #36]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40022000 	.word	0x40022000

08001e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e24:	2300      	movs	r3, #0
 8001e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e28:	2300      	movs	r3, #0
 8001e2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d031      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e40:	d01a      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e46:	d814      	bhi.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d009      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e50:	d10f      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e52:	4bac      	ldr	r3, [pc, #688]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	4aab      	ldr	r2, [pc, #684]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e5e:	e00c      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3304      	adds	r3, #4
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f9dc 	bl	8002224 <RCCEx_PLLSAI1_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e70:	e003      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	74fb      	strb	r3, [r7, #19]
      break;
 8001e76:	e000      	b.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e7a:	7cfb      	ldrb	r3, [r7, #19]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e80:	4ba0      	ldr	r3, [pc, #640]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e8e:	499d      	ldr	r1, [pc, #628]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e96:	e001      	b.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 8099 	beq.w	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eae:	4b95      	ldr	r3, [pc, #596]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e000      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00d      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec4:	4b8f      	ldr	r3, [pc, #572]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a8e      	ldr	r2, [pc, #568]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001edc:	2301      	movs	r3, #1
 8001ede:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ee0:	4b89      	ldr	r3, [pc, #548]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a88      	ldr	r2, [pc, #544]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eec:	f7fe fe54 	bl	8000b98 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ef2:	e009      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef4:	f7fe fe50 	bl	8000b98 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d902      	bls.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	74fb      	strb	r3, [r7, #19]
        break;
 8001f06:	e005      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f08:	4b7f      	ldr	r3, [pc, #508]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0ef      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d155      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f1a:	4b7a      	ldr	r3, [pc, #488]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f24:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d01e      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d019      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f36:	4b73      	ldr	r3, [pc, #460]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f40:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f42:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	4a6e      	ldr	r2, [pc, #440]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f52:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	4a6a      	ldr	r2, [pc, #424]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f62:	4a68      	ldr	r2, [pc, #416]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7fe fe10 	bl	8000b98 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7a:	e00b      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7fe fe0c 	bl	8000b98 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	74fb      	strb	r3, [r7, #19]
            break;
 8001f92:	e006      	b.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f94:	4b5b      	ldr	r3, [pc, #364]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0ec      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001fa2:	7cfb      	ldrb	r3, [r7, #19]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	4953      	ldr	r1, [pc, #332]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fbe:	e004      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
 8001fc4:	e001      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fca:	7c7b      	ldrb	r3, [r7, #17]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00a      	beq.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fee:	f023 0203 	bic.w	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4943      	ldr	r1, [pc, #268]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800200a:	4b3e      	ldr	r3, [pc, #248]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800200c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002010:	f023 020c 	bic.w	r2, r3, #12
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002018:	493a      	ldr	r1, [pc, #232]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00a      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800202c:	4b35      	ldr	r3, [pc, #212]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	4932      	ldr	r1, [pc, #200]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800203c:	4313      	orrs	r3, r2
 800203e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00a      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800204e:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002054:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205c:	4929      	ldr	r1, [pc, #164]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00a      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	4921      	ldr	r1, [pc, #132]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002080:	4313      	orrs	r3, r2
 8002082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	4918      	ldr	r1, [pc, #96]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00a      	beq.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020b4:	4b13      	ldr	r3, [pc, #76]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4910      	ldr	r1, [pc, #64]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d02c      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020f4:	d10a      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f6:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	4a02      	ldr	r2, [pc, #8]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80020fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002100:	60d3      	str	r3, [r2, #12]
 8002102:	e015      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002104:	40021000 	.word	0x40021000
 8002108:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002114:	d10c      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3304      	adds	r3, #4
 800211a:	2101      	movs	r1, #1
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f881 	bl	8002224 <RCCEx_PLLSAI1_Config>
 8002122:	4603      	mov	r3, r0
 8002124:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002126:	7cfb      	ldrb	r3, [r7, #19]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d028      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	492d      	ldr	r1, [pc, #180]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215a:	d106      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a27      	ldr	r2, [pc, #156]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002166:	60d3      	str	r3, [r2, #12]
 8002168:	e011      	b.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002172:	d10c      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3304      	adds	r3, #4
 8002178:	2101      	movs	r1, #1
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f852 	bl	8002224 <RCCEx_PLLSAI1_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002184:	7cfb      	ldrb	r3, [r7, #19]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a8:	4915      	ldr	r1, [pc, #84]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	3304      	adds	r3, #4
 80021be:	2102      	movs	r1, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f000 f82f 	bl	8002224 <RCCEx_PLLSAI1_Config>
 80021c6:	4603      	mov	r3, r0
 80021c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00a      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	4904      	ldr	r1, [pc, #16]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40021000 	.word	0x40021000

08002204 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002208:	4b05      	ldr	r3, [pc, #20]	; (8002220 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800220e:	f043 0304 	orr.w	r3, r3, #4
 8002212:	6013      	str	r3, [r2, #0]
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000

08002224 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002232:	4b74      	ldr	r3, [pc, #464]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d018      	beq.n	8002270 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800223e:	4b71      	ldr	r3, [pc, #452]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0203 	and.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d10d      	bne.n	800226a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
       ||
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	091b      	lsrs	r3, r3, #4
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
       ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d047      	beq.n	80022fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	73fb      	strb	r3, [r7, #15]
 800226e:	e044      	b.n	80022fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d018      	beq.n	80022aa <RCCEx_PLLSAI1_Config+0x86>
 8002278:	2b03      	cmp	r3, #3
 800227a:	d825      	bhi.n	80022c8 <RCCEx_PLLSAI1_Config+0xa4>
 800227c:	2b01      	cmp	r3, #1
 800227e:	d002      	beq.n	8002286 <RCCEx_PLLSAI1_Config+0x62>
 8002280:	2b02      	cmp	r3, #2
 8002282:	d009      	beq.n	8002298 <RCCEx_PLLSAI1_Config+0x74>
 8002284:	e020      	b.n	80022c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002286:	4b5f      	ldr	r3, [pc, #380]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d11d      	bne.n	80022ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002296:	e01a      	b.n	80022ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d116      	bne.n	80022d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a8:	e013      	b.n	80022d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022aa:	4b56      	ldr	r3, [pc, #344]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10f      	bne.n	80022d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022b6:	4b53      	ldr	r3, [pc, #332]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022c6:	e006      	b.n	80022d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
      break;
 80022cc:	e004      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022ce:	bf00      	nop
 80022d0:	e002      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022d2:	bf00      	nop
 80022d4:	e000      	b.n	80022d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022de:	4b49      	ldr	r3, [pc, #292]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6819      	ldr	r1, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	430b      	orrs	r3, r1
 80022f4:	4943      	ldr	r1, [pc, #268]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d17c      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3f      	ldr	r2, [pc, #252]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800230a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800230c:	f7fe fc44 	bl	8000b98 <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002312:	e009      	b.n	8002328 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002314:	f7fe fc40 	bl	8000b98 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d902      	bls.n	8002328 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	73fb      	strb	r3, [r7, #15]
        break;
 8002326:	e005      	b.n	8002334 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002328:	4b36      	ldr	r3, [pc, #216]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ef      	bne.n	8002314 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d15f      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d110      	bne.n	8002362 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002348:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6892      	ldr	r2, [r2, #8]
 8002350:	0211      	lsls	r1, r2, #8
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68d2      	ldr	r2, [r2, #12]
 8002356:	06d2      	lsls	r2, r2, #27
 8002358:	430a      	orrs	r2, r1
 800235a:	492a      	ldr	r1, [pc, #168]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	610b      	str	r3, [r1, #16]
 8002360:	e027      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d112      	bne.n	800238e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002370:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6892      	ldr	r2, [r2, #8]
 8002378:	0211      	lsls	r1, r2, #8
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	6912      	ldr	r2, [r2, #16]
 800237e:	0852      	lsrs	r2, r2, #1
 8002380:	3a01      	subs	r2, #1
 8002382:	0552      	lsls	r2, r2, #21
 8002384:	430a      	orrs	r2, r1
 8002386:	491f      	ldr	r1, [pc, #124]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	610b      	str	r3, [r1, #16]
 800238c:	e011      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002396:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6892      	ldr	r2, [r2, #8]
 800239e:	0211      	lsls	r1, r2, #8
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6952      	ldr	r2, [r2, #20]
 80023a4:	0852      	lsrs	r2, r2, #1
 80023a6:	3a01      	subs	r2, #1
 80023a8:	0652      	lsls	r2, r2, #25
 80023aa:	430a      	orrs	r2, r1
 80023ac:	4915      	ldr	r1, [pc, #84]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023b2:	4b14      	ldr	r3, [pc, #80]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a13      	ldr	r2, [pc, #76]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023be:	f7fe fbeb 	bl	8000b98 <HAL_GetTick>
 80023c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023c4:	e009      	b.n	80023da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023c6:	f7fe fbe7 	bl	8000b98 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d902      	bls.n	80023da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	73fb      	strb	r3, [r7, #15]
          break;
 80023d8:	e005      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0ef      	beq.n	80023c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d106      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ee:	691a      	ldr	r2, [r3, #16]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4903      	ldr	r1, [pc, #12]	; (8002404 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e049      	b.n	80024ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002420:	b2db      	uxtb	r3, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d106      	bne.n	8002434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fa22 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3304      	adds	r3, #4
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f000 fb52 	bl	8002af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e049      	b.n	800255c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d106      	bne.n	80024e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f841 	bl	8002564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2202      	movs	r2, #2
 80024e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	3304      	adds	r3, #4
 80024f2:	4619      	mov	r1, r3
 80024f4:	4610      	mov	r0, r2
 80024f6:	f000 fafb 	bl	8002af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800255a:	2300      	movs	r3, #0
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d109      	bne.n	800259c <HAL_TIM_PWM_Start+0x24>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800258e:	b2db      	uxtb	r3, r3
 8002590:	2b01      	cmp	r3, #1
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e03c      	b.n	8002616 <HAL_TIM_PWM_Start+0x9e>
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d109      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x3e>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e02f      	b.n	8002616 <HAL_TIM_PWM_Start+0x9e>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d109      	bne.n	80025d0 <HAL_TIM_PWM_Start+0x58>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e022      	b.n	8002616 <HAL_TIM_PWM_Start+0x9e>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	d109      	bne.n	80025ea <HAL_TIM_PWM_Start+0x72>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	e015      	b.n	8002616 <HAL_TIM_PWM_Start+0x9e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b10      	cmp	r3, #16
 80025ee:	d109      	bne.n	8002604 <HAL_TIM_PWM_Start+0x8c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	bf14      	ite	ne
 80025fc:	2301      	movne	r3, #1
 80025fe:	2300      	moveq	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	e008      	b.n	8002616 <HAL_TIM_PWM_Start+0x9e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07e      	b.n	800271c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0xb6>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262c:	e023      	b.n	8002676 <HAL_TIM_PWM_Start+0xfe>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0xc6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800263c:	e01b      	b.n	8002676 <HAL_TIM_PWM_Start+0xfe>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start+0xd6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800264c:	e013      	b.n	8002676 <HAL_TIM_PWM_Start+0xfe>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b0c      	cmp	r3, #12
 8002652:	d104      	bne.n	800265e <HAL_TIM_PWM_Start+0xe6>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800265c:	e00b      	b.n	8002676 <HAL_TIM_PWM_Start+0xfe>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b10      	cmp	r3, #16
 8002662:	d104      	bne.n	800266e <HAL_TIM_PWM_Start+0xf6>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800266c:	e003      	b.n	8002676 <HAL_TIM_PWM_Start+0xfe>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2202      	movs	r2, #2
 8002672:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	6839      	ldr	r1, [r7, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fdb2 	bl	80031e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a26      	ldr	r2, [pc, #152]	; (8002724 <HAL_TIM_PWM_Start+0x1ac>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x12a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a25      	ldr	r2, [pc, #148]	; (8002728 <HAL_TIM_PWM_Start+0x1b0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_TIM_PWM_Start+0x12a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_TIM_PWM_Start+0x1b4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_TIM_PWM_Start+0x12e>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_TIM_PWM_Start+0x130>
 80026a6:	2300      	movs	r3, #0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_TIM_PWM_Start+0x1ac>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d009      	beq.n	80026da <HAL_TIM_PWM_Start+0x162>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ce:	d004      	beq.n	80026da <HAL_TIM_PWM_Start+0x162>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <HAL_TIM_PWM_Start+0x1b0>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d115      	bne.n	8002706 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <HAL_TIM_PWM_Start+0x1b8>)
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d015      	beq.n	8002718 <HAL_TIM_PWM_Start+0x1a0>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f2:	d011      	beq.n	8002718 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002704:	e008      	b.n	8002718 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f042 0201 	orr.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e000      	b.n	800271a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002718:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40014000 	.word	0x40014000
 800272c:	40014400 	.word	0x40014400
 8002730:	00010007 	.word	0x00010007

08002734 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274a:	2b01      	cmp	r3, #1
 800274c:	d101      	bne.n	8002752 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800274e:	2302      	movs	r3, #2
 8002750:	e0ff      	b.n	8002952 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b14      	cmp	r3, #20
 800275e:	f200 80f0 	bhi.w	8002942 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002762:	a201      	add	r2, pc, #4	; (adr r2, 8002768 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002768:	080027bd 	.word	0x080027bd
 800276c:	08002943 	.word	0x08002943
 8002770:	08002943 	.word	0x08002943
 8002774:	08002943 	.word	0x08002943
 8002778:	080027fd 	.word	0x080027fd
 800277c:	08002943 	.word	0x08002943
 8002780:	08002943 	.word	0x08002943
 8002784:	08002943 	.word	0x08002943
 8002788:	0800283f 	.word	0x0800283f
 800278c:	08002943 	.word	0x08002943
 8002790:	08002943 	.word	0x08002943
 8002794:	08002943 	.word	0x08002943
 8002798:	0800287f 	.word	0x0800287f
 800279c:	08002943 	.word	0x08002943
 80027a0:	08002943 	.word	0x08002943
 80027a4:	08002943 	.word	0x08002943
 80027a8:	080028c1 	.word	0x080028c1
 80027ac:	08002943 	.word	0x08002943
 80027b0:	08002943 	.word	0x08002943
 80027b4:	08002943 	.word	0x08002943
 80027b8:	08002901 	.word	0x08002901
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 f9f8 	bl	8002bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	699a      	ldr	r2, [r3, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0208 	orr.w	r2, r2, #8
 80027d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0204 	bic.w	r2, r2, #4
 80027e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6999      	ldr	r1, [r3, #24]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	619a      	str	r2, [r3, #24]
      break;
 80027fa:	e0a5      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fa54 	bl	8002cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	699a      	ldr	r2, [r3, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6999      	ldr	r1, [r3, #24]
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	021a      	lsls	r2, r3, #8
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	619a      	str	r2, [r3, #24]
      break;
 800283c:	e084      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68b9      	ldr	r1, [r7, #8]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 faad 	bl	8002da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	69da      	ldr	r2, [r3, #28]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f042 0208 	orr.w	r2, r2, #8
 8002858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	69da      	ldr	r2, [r3, #28]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0204 	bic.w	r2, r2, #4
 8002868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69d9      	ldr	r1, [r3, #28]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	61da      	str	r2, [r3, #28]
      break;
 800287c:	e064      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68b9      	ldr	r1, [r7, #8]
 8002884:	4618      	mov	r0, r3
 8002886:	f000 fb05 	bl	8002e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69d9      	ldr	r1, [r3, #28]
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	021a      	lsls	r2, r3, #8
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	61da      	str	r2, [r3, #28]
      break;
 80028be:	e043      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fb42 	bl	8002f50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0208 	orr.w	r2, r2, #8
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0204 	bic.w	r2, r2, #4
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028fe:	e023      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fb7a 	bl	8003000 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800291a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	021a      	lsls	r2, r3, #8
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002940:	e002      	b.n	8002948 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002950:	7dfb      	ldrb	r3, [r7, #23]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop

0800295c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_TIM_ConfigClockSource+0x1c>
 8002974:	2302      	movs	r3, #2
 8002976:	e0b6      	b.n	8002ae6 <HAL_TIM_ConfigClockSource+0x18a>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800299a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b4:	d03e      	beq.n	8002a34 <HAL_TIM_ConfigClockSource+0xd8>
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	f200 8087 	bhi.w	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	f000 8086 	beq.w	8002ad2 <HAL_TIM_ConfigClockSource+0x176>
 80029c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ca:	d87f      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d01a      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xaa>
 80029d0:	2b70      	cmp	r3, #112	; 0x70
 80029d2:	d87b      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029d4:	2b60      	cmp	r3, #96	; 0x60
 80029d6:	d050      	beq.n	8002a7a <HAL_TIM_ConfigClockSource+0x11e>
 80029d8:	2b60      	cmp	r3, #96	; 0x60
 80029da:	d877      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029dc:	2b50      	cmp	r3, #80	; 0x50
 80029de:	d03c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0xfe>
 80029e0:	2b50      	cmp	r3, #80	; 0x50
 80029e2:	d873      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d058      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0x13e>
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d86f      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029ec:	2b30      	cmp	r3, #48	; 0x30
 80029ee:	d064      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15e>
 80029f0:	2b30      	cmp	r3, #48	; 0x30
 80029f2:	d86b      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d060      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15e>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d867      	bhi.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05c      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15e>
 8002a00:	2b10      	cmp	r3, #16
 8002a02:	d05a      	beq.n	8002aba <HAL_TIM_ConfigClockSource+0x15e>
 8002a04:	e062      	b.n	8002acc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f000 fbc7 	bl	80031a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	609a      	str	r2, [r3, #8]
      break;
 8002a32:	e04f      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6899      	ldr	r1, [r3, #8]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f000 fbb0 	bl	80031a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a56:	609a      	str	r2, [r3, #8]
      break;
 8002a58:	e03c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	461a      	mov	r2, r3
 8002a68:	f000 fb24 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2150      	movs	r1, #80	; 0x50
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fb7d 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002a78:	e02c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6818      	ldr	r0, [r3, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	461a      	mov	r2, r3
 8002a88:	f000 fb43 	bl	8003112 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2160      	movs	r1, #96	; 0x60
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fb6d 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002a98:	e01c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f000 fb04 	bl	80030b4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2140      	movs	r1, #64	; 0x40
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb5d 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002ab8:	e00c      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	f000 fb54 	bl	8003172 <TIM_ITRx_SetConfig>
      break;
 8002aca:	e003      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ad2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3710      	adds	r7, #16
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a2a      	ldr	r2, [pc, #168]	; (8002bac <TIM_Base_SetConfig+0xbc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d003      	beq.n	8002b10 <TIM_Base_SetConfig+0x20>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0e:	d108      	bne.n	8002b22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a21      	ldr	r2, [pc, #132]	; (8002bac <TIM_Base_SetConfig+0xbc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00b      	beq.n	8002b42 <TIM_Base_SetConfig+0x52>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d007      	beq.n	8002b42 <TIM_Base_SetConfig+0x52>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <TIM_Base_SetConfig+0xc0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d003      	beq.n	8002b42 <TIM_Base_SetConfig+0x52>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <TIM_Base_SetConfig+0xc4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d108      	bne.n	8002b54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <TIM_Base_SetConfig+0xbc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_Base_SetConfig+0xa0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0b      	ldr	r2, [pc, #44]	; (8002bb0 <TIM_Base_SetConfig+0xc0>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0xa0>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <TIM_Base_SetConfig+0xc4>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d103      	bne.n	8002b98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	615a      	str	r2, [r3, #20]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400

08002bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f023 0303 	bic.w	r3, r3, #3
 8002bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 0302 	bic.w	r3, r3, #2
 8002c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a24      	ldr	r2, [pc, #144]	; (8002ca4 <TIM_OC1_SetConfig+0xec>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d007      	beq.n	8002c28 <TIM_OC1_SetConfig+0x70>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a23      	ldr	r2, [pc, #140]	; (8002ca8 <TIM_OC1_SetConfig+0xf0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d003      	beq.n	8002c28 <TIM_OC1_SetConfig+0x70>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a22      	ldr	r2, [pc, #136]	; (8002cac <TIM_OC1_SetConfig+0xf4>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d10c      	bne.n	8002c42 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f023 0308 	bic.w	r3, r3, #8
 8002c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f023 0304 	bic.w	r3, r3, #4
 8002c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <TIM_OC1_SetConfig+0xec>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <TIM_OC1_SetConfig+0xa2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <TIM_OC1_SetConfig+0xf0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_OC1_SetConfig+0xa2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a15      	ldr	r2, [pc, #84]	; (8002cac <TIM_OC1_SetConfig+0xf4>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d111      	bne.n	8002c7e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	621a      	str	r2, [r3, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	371c      	adds	r7, #28
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40014000 	.word	0x40014000
 8002cac:	40014400 	.word	0x40014400

08002cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	f023 0210 	bic.w	r2, r3, #16
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
 8002cca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f023 0320 	bic.w	r3, r3, #32
 8002cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a22      	ldr	r2, [pc, #136]	; (8002d98 <TIM_OC2_SetConfig+0xe8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d10d      	bne.n	8002d30 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <TIM_OC2_SetConfig+0xe8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <TIM_OC2_SetConfig+0x98>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a18      	ldr	r2, [pc, #96]	; (8002d9c <TIM_OC2_SetConfig+0xec>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <TIM_OC2_SetConfig+0x98>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a17      	ldr	r2, [pc, #92]	; (8002da0 <TIM_OC2_SetConfig+0xf0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d113      	bne.n	8002d70 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	621a      	str	r2, [r3, #32]
}
 8002d8a:	bf00      	nop
 8002d8c:	371c      	adds	r7, #28
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	40012c00 	.word	0x40012c00
 8002d9c:	40014000 	.word	0x40014000
 8002da0:	40014400 	.word	0x40014400

08002da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	021b      	lsls	r3, r3, #8
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <TIM_OC3_SetConfig+0xe4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10d      	bne.n	8002e22 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_OC3_SetConfig+0xe4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <TIM_OC3_SetConfig+0x96>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a17      	ldr	r2, [pc, #92]	; (8002e8c <TIM_OC3_SetConfig+0xe8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d003      	beq.n	8002e3a <TIM_OC3_SetConfig+0x96>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <TIM_OC3_SetConfig+0xec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d113      	bne.n	8002e62 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68fa      	ldr	r2, [r7, #12]
 8002e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40014000 	.word	0x40014000
 8002e90:	40014400 	.word	0x40014400

08002e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	021b      	lsls	r3, r3, #8
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	031b      	lsls	r3, r3, #12
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <TIM_OC4_SetConfig+0xb0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d007      	beq.n	8002f08 <TIM_OC4_SetConfig+0x74>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a13      	ldr	r2, [pc, #76]	; (8002f48 <TIM_OC4_SetConfig+0xb4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d003      	beq.n	8002f08 <TIM_OC4_SetConfig+0x74>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <TIM_OC4_SetConfig+0xb8>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d109      	bne.n	8002f1c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	019b      	lsls	r3, r3, #6
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	621a      	str	r2, [r3, #32]
}
 8002f36:	bf00      	nop
 8002f38:	371c      	adds	r7, #28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40014400 	.word	0x40014400

08002f50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a13      	ldr	r2, [pc, #76]	; (8002ff4 <TIM_OC5_SetConfig+0xa4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_OC5_SetConfig+0x6a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <TIM_OC5_SetConfig+0xa8>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_OC5_SetConfig+0x6a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a11      	ldr	r2, [pc, #68]	; (8002ffc <TIM_OC5_SetConfig+0xac>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d109      	bne.n	8002fce <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	021b      	lsls	r3, r3, #8
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400

08003000 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	051b      	lsls	r3, r3, #20
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4313      	orrs	r3, r2
 8003052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <TIM_OC6_SetConfig+0xa8>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d007      	beq.n	800306c <TIM_OC6_SetConfig+0x6c>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <TIM_OC6_SetConfig+0xac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d003      	beq.n	800306c <TIM_OC6_SetConfig+0x6c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a12      	ldr	r2, [pc, #72]	; (80030b0 <TIM_OC6_SetConfig+0xb0>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d109      	bne.n	8003080 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003072:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40012c00 	.word	0x40012c00
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400

080030b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a1b      	ldr	r3, [r3, #32]
 80030c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f023 030a 	bic.w	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003112:	b480      	push	{r7}
 8003114:	b087      	sub	sp, #28
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	f023 0210 	bic.w	r2, r3, #16
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800313c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	031b      	lsls	r3, r3, #12
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800314e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	621a      	str	r2, [r3, #32]
}
 8003166:	bf00      	nop
 8003168:	371c      	adds	r7, #28
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003172:	b480      	push	{r7}
 8003174:	b085      	sub	sp, #20
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003188:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	f043 0307 	orr.w	r3, r3, #7
 8003194:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	609a      	str	r2, [r3, #8]
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	609a      	str	r2, [r3, #8]
}
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2201      	movs	r2, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a1a      	ldr	r2, [r3, #32]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	43db      	mvns	r3, r3
 800320a:	401a      	ands	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	fa01 f303 	lsl.w	r3, r1, r3
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	621a      	str	r2, [r3, #32]
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003248:	2302      	movs	r3, #2
 800324a:	e04f      	b.n	80032ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d108      	bne.n	8003288 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800327c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b4:	d004      	beq.n	80032c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a10      	ldr	r2, [pc, #64]	; (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d10c      	bne.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014000 	.word	0x40014000

08003300 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003318:	2302      	movs	r3, #2
 800331a:	e060      	b.n	80033de <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4313      	orrs	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003382:	4313      	orrs	r3, r2
 8003384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	041b      	lsls	r3, r3, #16
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d115      	bne.n	80033cc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	051b      	lsls	r3, r3, #20
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40012c00 	.word	0x40012c00

080033f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e040      	b.n	8003484 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fa88 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0201 	bic.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f82c 	bl	800348c <UART_SetConfig>
 8003434:	4603      	mov	r3, r0
 8003436:	2b01      	cmp	r3, #1
 8003438:	d101      	bne.n	800343e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa2a 	bl	80038a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800345a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800346a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 fab1 	bl	80039e4 <UART_CheckIdleState>
 8003482:	4603      	mov	r3, r0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4baf      	ldr	r3, [pc, #700]	; (8003774 <UART_SetConfig+0x2e8>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	69f9      	ldr	r1, [r7, #28]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4aa4      	ldr	r2, [pc, #656]	; (8003778 <UART_SetConfig+0x2ec>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d004      	beq.n	80034f4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	430a      	orrs	r2, r1
 8003506:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a9b      	ldr	r2, [pc, #620]	; (800377c <UART_SetConfig+0x2f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d121      	bne.n	8003556 <UART_SetConfig+0xca>
 8003512:	4b9b      	ldr	r3, [pc, #620]	; (8003780 <UART_SetConfig+0x2f4>)
 8003514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b03      	cmp	r3, #3
 800351e:	d817      	bhi.n	8003550 <UART_SetConfig+0xc4>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x9c>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	08003539 	.word	0x08003539
 800352c:	08003545 	.word	0x08003545
 8003530:	0800353f 	.word	0x0800353f
 8003534:	0800354b 	.word	0x0800354b
 8003538:	2301      	movs	r3, #1
 800353a:	76fb      	strb	r3, [r7, #27]
 800353c:	e070      	b.n	8003620 <UART_SetConfig+0x194>
 800353e:	2302      	movs	r3, #2
 8003540:	76fb      	strb	r3, [r7, #27]
 8003542:	e06d      	b.n	8003620 <UART_SetConfig+0x194>
 8003544:	2304      	movs	r3, #4
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e06a      	b.n	8003620 <UART_SetConfig+0x194>
 800354a:	2308      	movs	r3, #8
 800354c:	76fb      	strb	r3, [r7, #27]
 800354e:	e067      	b.n	8003620 <UART_SetConfig+0x194>
 8003550:	2310      	movs	r3, #16
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e064      	b.n	8003620 <UART_SetConfig+0x194>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a8a      	ldr	r2, [pc, #552]	; (8003784 <UART_SetConfig+0x2f8>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d132      	bne.n	80035c6 <UART_SetConfig+0x13a>
 8003560:	4b87      	ldr	r3, [pc, #540]	; (8003780 <UART_SetConfig+0x2f4>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d828      	bhi.n	80035c0 <UART_SetConfig+0x134>
 800356e:	a201      	add	r2, pc, #4	; (adr r2, 8003574 <UART_SetConfig+0xe8>)
 8003570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003574:	080035a9 	.word	0x080035a9
 8003578:	080035c1 	.word	0x080035c1
 800357c:	080035c1 	.word	0x080035c1
 8003580:	080035c1 	.word	0x080035c1
 8003584:	080035b5 	.word	0x080035b5
 8003588:	080035c1 	.word	0x080035c1
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035c1 	.word	0x080035c1
 8003594:	080035af 	.word	0x080035af
 8003598:	080035c1 	.word	0x080035c1
 800359c:	080035c1 	.word	0x080035c1
 80035a0:	080035c1 	.word	0x080035c1
 80035a4:	080035bb 	.word	0x080035bb
 80035a8:	2300      	movs	r3, #0
 80035aa:	76fb      	strb	r3, [r7, #27]
 80035ac:	e038      	b.n	8003620 <UART_SetConfig+0x194>
 80035ae:	2302      	movs	r3, #2
 80035b0:	76fb      	strb	r3, [r7, #27]
 80035b2:	e035      	b.n	8003620 <UART_SetConfig+0x194>
 80035b4:	2304      	movs	r3, #4
 80035b6:	76fb      	strb	r3, [r7, #27]
 80035b8:	e032      	b.n	8003620 <UART_SetConfig+0x194>
 80035ba:	2308      	movs	r3, #8
 80035bc:	76fb      	strb	r3, [r7, #27]
 80035be:	e02f      	b.n	8003620 <UART_SetConfig+0x194>
 80035c0:	2310      	movs	r3, #16
 80035c2:	76fb      	strb	r3, [r7, #27]
 80035c4:	e02c      	b.n	8003620 <UART_SetConfig+0x194>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6b      	ldr	r2, [pc, #428]	; (8003778 <UART_SetConfig+0x2ec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d125      	bne.n	800361c <UART_SetConfig+0x190>
 80035d0:	4b6b      	ldr	r3, [pc, #428]	; (8003780 <UART_SetConfig+0x2f4>)
 80035d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035de:	d017      	beq.n	8003610 <UART_SetConfig+0x184>
 80035e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035e4:	d817      	bhi.n	8003616 <UART_SetConfig+0x18a>
 80035e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ea:	d00b      	beq.n	8003604 <UART_SetConfig+0x178>
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f0:	d811      	bhi.n	8003616 <UART_SetConfig+0x18a>
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <UART_SetConfig+0x172>
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d006      	beq.n	800360a <UART_SetConfig+0x17e>
 80035fc:	e00b      	b.n	8003616 <UART_SetConfig+0x18a>
 80035fe:	2300      	movs	r3, #0
 8003600:	76fb      	strb	r3, [r7, #27]
 8003602:	e00d      	b.n	8003620 <UART_SetConfig+0x194>
 8003604:	2302      	movs	r3, #2
 8003606:	76fb      	strb	r3, [r7, #27]
 8003608:	e00a      	b.n	8003620 <UART_SetConfig+0x194>
 800360a:	2304      	movs	r3, #4
 800360c:	76fb      	strb	r3, [r7, #27]
 800360e:	e007      	b.n	8003620 <UART_SetConfig+0x194>
 8003610:	2308      	movs	r3, #8
 8003612:	76fb      	strb	r3, [r7, #27]
 8003614:	e004      	b.n	8003620 <UART_SetConfig+0x194>
 8003616:	2310      	movs	r3, #16
 8003618:	76fb      	strb	r3, [r7, #27]
 800361a:	e001      	b.n	8003620 <UART_SetConfig+0x194>
 800361c:	2310      	movs	r3, #16
 800361e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <UART_SetConfig+0x2ec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d173      	bne.n	8003712 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800362a:	7efb      	ldrb	r3, [r7, #27]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d824      	bhi.n	800367a <UART_SetConfig+0x1ee>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0x1ac>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	0800365d 	.word	0x0800365d
 800363c:	0800367b 	.word	0x0800367b
 8003640:	08003665 	.word	0x08003665
 8003644:	0800367b 	.word	0x0800367b
 8003648:	0800366b 	.word	0x0800366b
 800364c:	0800367b 	.word	0x0800367b
 8003650:	0800367b 	.word	0x0800367b
 8003654:	0800367b 	.word	0x0800367b
 8003658:	08003673 	.word	0x08003673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800365c:	f7fe fb52 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8003660:	6178      	str	r0, [r7, #20]
        break;
 8003662:	e00f      	b.n	8003684 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003664:	4b48      	ldr	r3, [pc, #288]	; (8003788 <UART_SetConfig+0x2fc>)
 8003666:	617b      	str	r3, [r7, #20]
        break;
 8003668:	e00c      	b.n	8003684 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366a:	f7fe fab3 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 800366e:	6178      	str	r0, [r7, #20]
        break;
 8003670:	e008      	b.n	8003684 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003676:	617b      	str	r3, [r7, #20]
        break;
 8003678:	e004      	b.n	8003684 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	76bb      	strb	r3, [r7, #26]
        break;
 8003682:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	f000 80fc 	beq.w	8003884 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	429a      	cmp	r2, r3
 800369a:	d305      	bcc.n	80036a8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d902      	bls.n	80036ae <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	76bb      	strb	r3, [r7, #26]
 80036ac:	e0ea      	b.n	8003884 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	020b      	lsls	r3, r1, #8
 80036c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036c4:	0202      	lsls	r2, r0, #8
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	6849      	ldr	r1, [r1, #4]
 80036ca:	0849      	lsrs	r1, r1, #1
 80036cc:	4608      	mov	r0, r1
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	1814      	adds	r4, r2, r0
 80036d4:	eb43 0501 	adc.w	r5, r3, r1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	461a      	mov	r2, r3
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	4620      	mov	r0, r4
 80036e4:	4629      	mov	r1, r5
 80036e6:	f7fc fd71 	bl	80001cc <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4613      	mov	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f8:	d308      	bcc.n	800370c <UART_SetConfig+0x280>
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003700:	d204      	bcs.n	800370c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e0bb      	b.n	8003884 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	76bb      	strb	r3, [r7, #26]
 8003710:	e0b8      	b.n	8003884 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d167      	bne.n	80037ec <UART_SetConfig+0x360>
  {
    switch (clocksource)
 800371c:	7efb      	ldrb	r3, [r7, #27]
 800371e:	2b08      	cmp	r3, #8
 8003720:	d834      	bhi.n	800378c <UART_SetConfig+0x300>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <UART_SetConfig+0x29c>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	0800374d 	.word	0x0800374d
 800372c:	08003755 	.word	0x08003755
 8003730:	0800375d 	.word	0x0800375d
 8003734:	0800378d 	.word	0x0800378d
 8003738:	08003763 	.word	0x08003763
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800378d 	.word	0x0800378d
 8003744:	0800378d 	.word	0x0800378d
 8003748:	0800376b 	.word	0x0800376b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800374c:	f7fe fada 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8003750:	6178      	str	r0, [r7, #20]
        break;
 8003752:	e020      	b.n	8003796 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003754:	f7fe faec 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8003758:	6178      	str	r0, [r7, #20]
        break;
 800375a:	e01c      	b.n	8003796 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800375c:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <UART_SetConfig+0x2fc>)
 800375e:	617b      	str	r3, [r7, #20]
        break;
 8003760:	e019      	b.n	8003796 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003762:	f7fe fa37 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8003766:	6178      	str	r0, [r7, #20]
        break;
 8003768:	e015      	b.n	8003796 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376e:	617b      	str	r3, [r7, #20]
        break;
 8003770:	e011      	b.n	8003796 <UART_SetConfig+0x30a>
 8003772:	bf00      	nop
 8003774:	efff69f3 	.word	0xefff69f3
 8003778:	40008000 	.word	0x40008000
 800377c:	40013800 	.word	0x40013800
 8003780:	40021000 	.word	0x40021000
 8003784:	40004400 	.word	0x40004400
 8003788:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	76bb      	strb	r3, [r7, #26]
        break;
 8003794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d073      	beq.n	8003884 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005a      	lsls	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	441a      	add	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d916      	bls.n	80037e6 <UART_SetConfig+0x35a>
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037be:	d212      	bcs.n	80037e6 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	f023 030f 	bic.w	r3, r3, #15
 80037c8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	4313      	orrs	r3, r2
 80037da:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	89fa      	ldrh	r2, [r7, #14]
 80037e2:	60da      	str	r2, [r3, #12]
 80037e4:	e04e      	b.n	8003884 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	76bb      	strb	r3, [r7, #26]
 80037ea:	e04b      	b.n	8003884 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037ec:	7efb      	ldrb	r3, [r7, #27]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d827      	bhi.n	8003842 <UART_SetConfig+0x3b6>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <UART_SetConfig+0x36c>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	0800381d 	.word	0x0800381d
 80037fc:	08003825 	.word	0x08003825
 8003800:	0800382d 	.word	0x0800382d
 8003804:	08003843 	.word	0x08003843
 8003808:	08003833 	.word	0x08003833
 800380c:	08003843 	.word	0x08003843
 8003810:	08003843 	.word	0x08003843
 8003814:	08003843 	.word	0x08003843
 8003818:	0800383b 	.word	0x0800383b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800381c:	f7fe fa72 	bl	8001d04 <HAL_RCC_GetPCLK1Freq>
 8003820:	6178      	str	r0, [r7, #20]
        break;
 8003822:	e013      	b.n	800384c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003824:	f7fe fa84 	bl	8001d30 <HAL_RCC_GetPCLK2Freq>
 8003828:	6178      	str	r0, [r7, #20]
        break;
 800382a:	e00f      	b.n	800384c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800382c:	4b1b      	ldr	r3, [pc, #108]	; (800389c <UART_SetConfig+0x410>)
 800382e:	617b      	str	r3, [r7, #20]
        break;
 8003830:	e00c      	b.n	800384c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003832:	f7fe f9cf 	bl	8001bd4 <HAL_RCC_GetSysClockFreq>
 8003836:	6178      	str	r0, [r7, #20]
        break;
 8003838:	e008      	b.n	800384c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800383e:	617b      	str	r3, [r7, #20]
        break;
 8003840:	e004      	b.n	800384c <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	76bb      	strb	r3, [r7, #26]
        break;
 800384a:	bf00      	nop
    }

    if (pclk != 0U)
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d018      	beq.n	8003884 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	085a      	lsrs	r2, r3, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	441a      	add	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d909      	bls.n	8003880 <UART_SetConfig+0x3f4>
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003872:	d205      	bcs.n	8003880 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	b29a      	uxth	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60da      	str	r2, [r3, #12]
 800387e:	e001      	b.n	8003884 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003890:	7ebb      	ldrb	r3, [r7, #26]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bdb0      	pop	{r4, r5, r7, pc}
 800389a:	bf00      	nop
 800389c:	00f42400 	.word	0x00f42400

080038a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01a      	beq.n	80039b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399e:	d10a      	bne.n	80039b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039f4:	f7fd f8d0 	bl	8000b98 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d10e      	bne.n	8003a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f82d 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e023      	b.n	8003a6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d10e      	bne.n	8003a52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f817 	bl	8003a76 <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00d      	b.n	8003a6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b09c      	sub	sp, #112	; 0x70
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	e0a5      	b.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8e:	f000 80a1 	beq.w	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a92:	f7fd f881 	bl	8000b98 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003aa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d13e      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003abc:	667b      	str	r3, [r7, #100]	; 0x64
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e6      	bne.n	8003aa8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	f023 0301 	bic.w	r3, r3, #1
 8003af0:	663b      	str	r3, [r7, #96]	; 0x60
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3308      	adds	r3, #8
 8003af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003afa:	64ba      	str	r2, [r7, #72]	; 0x48
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b02:	e841 2300 	strex	r3, r2, [r1]
 8003b06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1e5      	bne.n	8003ada <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e067      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d04f      	beq.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b42:	d147      	bne.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	e853 3f00 	ldrex	r3, [r3]
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b74:	e841 2300 	strex	r3, r2, [r1]
 8003b78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e6      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	3308      	adds	r3, #8
 8003b86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 0301 	bic.w	r3, r3, #1
 8003b96:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ba0:	623a      	str	r2, [r7, #32]
 8003ba2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e5      	bne.n	8003b80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e010      	b.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	79fb      	ldrb	r3, [r7, #7]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	f43f af4a 	beq.w	8003a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3770      	adds	r7, #112	; 0x70
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <__libc_init_array>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	4d0d      	ldr	r5, [pc, #52]	; (8003c38 <__libc_init_array+0x38>)
 8003c04:	4c0d      	ldr	r4, [pc, #52]	; (8003c3c <__libc_init_array+0x3c>)
 8003c06:	1b64      	subs	r4, r4, r5
 8003c08:	10a4      	asrs	r4, r4, #2
 8003c0a:	2600      	movs	r6, #0
 8003c0c:	42a6      	cmp	r6, r4
 8003c0e:	d109      	bne.n	8003c24 <__libc_init_array+0x24>
 8003c10:	4d0b      	ldr	r5, [pc, #44]	; (8003c40 <__libc_init_array+0x40>)
 8003c12:	4c0c      	ldr	r4, [pc, #48]	; (8003c44 <__libc_init_array+0x44>)
 8003c14:	f000 f820 	bl	8003c58 <_init>
 8003c18:	1b64      	subs	r4, r4, r5
 8003c1a:	10a4      	asrs	r4, r4, #2
 8003c1c:	2600      	movs	r6, #0
 8003c1e:	42a6      	cmp	r6, r4
 8003c20:	d105      	bne.n	8003c2e <__libc_init_array+0x2e>
 8003c22:	bd70      	pop	{r4, r5, r6, pc}
 8003c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c28:	4798      	blx	r3
 8003c2a:	3601      	adds	r6, #1
 8003c2c:	e7ee      	b.n	8003c0c <__libc_init_array+0xc>
 8003c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c32:	4798      	blx	r3
 8003c34:	3601      	adds	r6, #1
 8003c36:	e7f2      	b.n	8003c1e <__libc_init_array+0x1e>
 8003c38:	08003cc0 	.word	0x08003cc0
 8003c3c:	08003cc0 	.word	0x08003cc0
 8003c40:	08003cc0 	.word	0x08003cc0
 8003c44:	08003cc4 	.word	0x08003cc4

08003c48 <memset>:
 8003c48:	4402      	add	r2, r0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d100      	bne.n	8003c52 <memset+0xa>
 8003c50:	4770      	bx	lr
 8003c52:	f803 1b01 	strb.w	r1, [r3], #1
 8003c56:	e7f9      	b.n	8003c4c <memset+0x4>

08003c58 <_init>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr

08003c64 <_fini>:
 8003c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c66:	bf00      	nop
 8003c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c6a:	bc08      	pop	{r3}
 8003c6c:	469e      	mov	lr, r3
 8003c6e:	4770      	bx	lr
